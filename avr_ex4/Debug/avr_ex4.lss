
avr_ex4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000492  00800100  0000131c  000013b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000131c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019b  00800592  00800592  00001842  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001842  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dab  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0f  00000000  00000000  00003703  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f46  00000000  00000000  00004112  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00005058  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000732  00000000  00000000  000052b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001812  00000000  00000000  000059ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000071fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c5       	rjmp	.+2778   	; 0xb1c <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	15 e0       	ldi	r17, 0x05	; 5
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e1       	ldi	r30, 0x1C	; 28
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 39       	cpi	r26, 0x92	; 146
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a2 e9       	ldi	r26, 0x92	; 146
      b6:	b5 e0       	ldi	r27, 0x05	; 5
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 32       	cpi	r26, 0x2D	; 45
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	84 d5       	rcall	.+2824   	; 0xbcc <main>
      c4:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <_Z10init_PORTCv>:
	return 0;
}

void MakeSound(int freq){
	if(freq == 0) OCR1A = 0;
	else OCR1A = 8000000 / freq; // 주파수 = 16000000 / (2 * 1(분주비) * OCR1A), OCR1A = 16000000 / (2 * 1) / 주파수
      ca:	8f ef       	ldi	r24, 0xFF	; 255
      cc:	84 bb       	out	0x14, r24	; 20
      ce:	85 bb       	out	0x15, r24	; 21
      d0:	08 95       	ret

000000d2 <_Z14instrction_outh>:
      d2:	98 2f       	mov	r25, r24
      d4:	90 7f       	andi	r25, 0xF0	; 240
      d6:	95 bb       	out	0x15, r25	; 21
      d8:	aa 9a       	sbi	0x15, 2	; 21
      da:	aa 98       	cbi	0x15, 2	; 21
      dc:	20 e1       	ldi	r18, 0x10	; 16
      de:	82 9f       	mul	r24, r18
      e0:	c0 01       	movw	r24, r0
      e2:	11 24       	eor	r1, r1
      e4:	85 bb       	out	0x15, r24	; 21
      e6:	aa 9a       	sbi	0x15, 2	; 21
      e8:	aa 98       	cbi	0x15, 2	; 21
      ea:	80 e4       	ldi	r24, 0x40	; 64
      ec:	9f e1       	ldi	r25, 0x1F	; 31
      ee:	01 97       	sbiw	r24, 0x01	; 1
      f0:	f1 f7       	brne	.-4      	; 0xee <_Z14instrction_outh+0x1c>
      f2:	08 95       	ret

000000f4 <_Z8char_outh>:
      f4:	98 2f       	mov	r25, r24
      f6:	90 7f       	andi	r25, 0xF0	; 240
      f8:	91 60       	ori	r25, 0x01	; 1
      fa:	95 bb       	out	0x15, r25	; 21
      fc:	aa 9a       	sbi	0x15, 2	; 21
      fe:	aa 98       	cbi	0x15, 2	; 21
     100:	20 e1       	ldi	r18, 0x10	; 16
     102:	82 9f       	mul	r24, r18
     104:	c0 01       	movw	r24, r0
     106:	11 24       	eor	r1, r1
     108:	81 60       	ori	r24, 0x01	; 1
     10a:	85 bb       	out	0x15, r24	; 21
     10c:	aa 9a       	sbi	0x15, 2	; 21
     10e:	aa 98       	cbi	0x15, 2	; 21
     110:	80 e4       	ldi	r24, 0x40	; 64
     112:	9f e1       	ldi	r25, 0x1F	; 31
     114:	01 97       	sbiw	r24, 0x01	; 1
     116:	f1 f7       	brne	.-4      	; 0x114 <_Z8char_outh+0x20>
     118:	08 95       	ret

0000011a <_Z10lcd_gotoxyhh>:
     11a:	66 23       	and	r22, r22
     11c:	19 f0       	breq	.+6      	; 0x124 <_Z10lcd_gotoxyhh+0xa>
     11e:	61 30       	cpi	r22, 0x01	; 1
     120:	21 f0       	breq	.+8      	; 0x12a <_Z10lcd_gotoxyhh+0x10>
     122:	08 95       	ret
     124:	80 58       	subi	r24, 0x80	; 128
     126:	d5 cf       	rjmp	.-86     	; 0xd2 <_Z14instrction_outh>
     128:	08 95       	ret
     12a:	80 54       	subi	r24, 0x40	; 64
     12c:	d2 cf       	rjmp	.-92     	; 0xd2 <_Z14instrction_outh>
     12e:	08 95       	ret

00000130 <_Z9lcd_putsfhhPh>:
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	04 2f       	mov	r16, r20
     13a:	15 2f       	mov	r17, r21
     13c:	ee df       	rcall	.-36     	; 0x11a <_Z10lcd_gotoxyhh>
     13e:	c0 2f       	mov	r28, r16
     140:	d1 2f       	mov	r29, r17
     142:	89 91       	ld	r24, Y+
     144:	d7 df       	rcall	.-82     	; 0xf4 <_Z8char_outh>
     146:	88 81       	ld	r24, Y
     148:	81 11       	cpse	r24, r1
     14a:	fb cf       	rjmp	.-10     	; 0x142 <_Z9lcd_putsfhhPh+0x12>
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	1f 91       	pop	r17
     152:	0f 91       	pop	r16
     154:	08 95       	ret

00000156 <_Z8lcd_initv>:
     156:	b9 df       	rcall	.-142    	; 0xca <_Z10init_PORTCv>
     158:	80 ed       	ldi	r24, 0xD0	; 208
     15a:	97 e0       	ldi	r25, 0x07	; 7
     15c:	20 e9       	ldi	r18, 0x90	; 144
     15e:	31 e0       	ldi	r19, 0x01	; 1
     160:	f9 01       	movw	r30, r18
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <_Z8lcd_initv+0xc>
     166:	01 97       	sbiw	r24, 0x01	; 1
     168:	d9 f7       	brne	.-10     	; 0x160 <_Z8lcd_initv+0xa>
     16a:	80 e6       	ldi	r24, 0x60	; 96
     16c:	99 e0       	ldi	r25, 0x09	; 9
     16e:	01 97       	sbiw	r24, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <_Z8lcd_initv+0x18>
     172:	88 e2       	ldi	r24, 0x28	; 40
     174:	ae df       	rcall	.-164    	; 0xd2 <_Z14instrction_outh>
     176:	80 ed       	ldi	r24, 0xD0	; 208
     178:	97 e0       	ldi	r25, 0x07	; 7
     17a:	20 e9       	ldi	r18, 0x90	; 144
     17c:	31 e0       	ldi	r19, 0x01	; 1
     17e:	f9 01       	movw	r30, r18
     180:	31 97       	sbiw	r30, 0x01	; 1
     182:	f1 f7       	brne	.-4      	; 0x180 <_Z8lcd_initv+0x2a>
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	d9 f7       	brne	.-10     	; 0x17e <_Z8lcd_initv+0x28>
     188:	88 e2       	ldi	r24, 0x28	; 40
     18a:	a3 df       	rcall	.-186    	; 0xd2 <_Z14instrction_outh>
     18c:	80 ed       	ldi	r24, 0xD0	; 208
     18e:	97 e0       	ldi	r25, 0x07	; 7
     190:	20 e9       	ldi	r18, 0x90	; 144
     192:	31 e0       	ldi	r19, 0x01	; 1
     194:	f9 01       	movw	r30, r18
     196:	31 97       	sbiw	r30, 0x01	; 1
     198:	f1 f7       	brne	.-4      	; 0x196 <_Z8lcd_initv+0x40>
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	d9 f7       	brne	.-10     	; 0x194 <_Z8lcd_initv+0x3e>
     19e:	8c e0       	ldi	r24, 0x0C	; 12
     1a0:	98 df       	rcall	.-208    	; 0xd2 <_Z14instrction_outh>
     1a2:	86 e0       	ldi	r24, 0x06	; 6
     1a4:	96 df       	rcall	.-212    	; 0xd2 <_Z14instrction_outh>
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	94 df       	rcall	.-216    	; 0xd2 <_Z14instrction_outh>
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	92 df       	rcall	.-220    	; 0xd2 <_Z14instrction_outh>
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	90 cf       	rjmp	.-224    	; 0xd2 <_Z14instrction_outh>
     1b2:	08 95       	ret

000001b4 <_Z9lcd_clearv>:
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	8d df       	rcall	.-230    	; 0xd2 <_Z14instrction_outh>
     1b8:	80 e4       	ldi	r24, 0x40	; 64
     1ba:	9c e9       	ldi	r25, 0x9C	; 156
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <_Z9lcd_clearv+0x8>
     1c0:	08 95       	ret

000001c2 <_Z9my_getkeyv>:
     1c2:	20 e0       	ldi	r18, 0x00	; 0
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	7b ef       	ldi	r23, 0xFB	; 251
     1c8:	6d ef       	ldi	r22, 0xFD	; 253
     1ca:	5e ef       	ldi	r21, 0xFE	; 254
     1cc:	4a e1       	ldi	r20, 0x1A	; 26
     1ce:	21 15       	cp	r18, r1
     1d0:	31 05       	cpc	r19, r1
     1d2:	11 f4       	brne	.+4      	; 0x1d8 <_Z9my_getkeyv+0x16>
     1d4:	52 bb       	out	0x12, r21	; 18
     1d6:	09 c0       	rjmp	.+18     	; 0x1ea <_Z9my_getkeyv+0x28>
     1d8:	21 30       	cpi	r18, 0x01	; 1
     1da:	31 05       	cpc	r19, r1
     1dc:	11 f4       	brne	.+4      	; 0x1e2 <_Z9my_getkeyv+0x20>
     1de:	62 bb       	out	0x12, r22	; 18
     1e0:	04 c0       	rjmp	.+8      	; 0x1ea <_Z9my_getkeyv+0x28>
     1e2:	22 30       	cpi	r18, 0x02	; 2
     1e4:	31 05       	cpc	r19, r1
     1e6:	09 f4       	brne	.+2      	; 0x1ea <_Z9my_getkeyv+0x28>
     1e8:	72 bb       	out	0x12, r23	; 18
     1ea:	84 2f       	mov	r24, r20
     1ec:	8a 95       	dec	r24
     1ee:	f1 f7       	brne	.-4      	; 0x1ec <_Z9my_getkeyv+0x2a>
     1f0:	80 b3       	in	r24, 0x10	; 16
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	80 95       	com	r24
     1f6:	90 95       	com	r25
     1f8:	80 7f       	andi	r24, 0xF0	; 240
     1fa:	99 27       	eor	r25, r25
     1fc:	00 97       	sbiw	r24, 0x00	; 0
     1fe:	21 f0       	breq	.+8      	; 0x208 <_Z9my_getkeyv+0x46>
     200:	22 b3       	in	r18, 0x12	; 18
     202:	2f 70       	andi	r18, 0x0F	; 15
     204:	82 2b       	or	r24, r18
     206:	08 95       	ret
     208:	2f 5f       	subi	r18, 0xFF	; 255
     20a:	3f 4f       	sbci	r19, 0xFF	; 255
     20c:	23 30       	cpi	r18, 0x03	; 3
     20e:	31 05       	cpc	r19, r1
     210:	f1 f6       	brne	.-68     	; 0x1ce <_Z9my_getkeyv+0xc>
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	08 95       	ret

00000218 <_Z9port_initv>:
}

void port_init(){
	//speaker init
	TCCR1A = 0x40;
     218:	80 e4       	ldi	r24, 0x40	; 64
     21a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x09;
     21c:	89 e0       	ldi	r24, 0x09	; 9
     21e:	8e bd       	out	0x2e, r24	; 46
	DDRB = 0xff;
     220:	8f ef       	ldi	r24, 0xFF	; 255
     222:	87 bb       	out	0x17, r24	; 23
	
	// led init
	DDRA = 0xff;
     224:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xff;
     226:	8b bb       	out	0x1b, r24	; 27

	// key init
	DDRD = 0b00001111;
     228:	9f e0       	ldi	r25, 0x0F	; 15
     22a:	91 bb       	out	0x11, r25	; 17
	PORTD = 0b11111111;
     22c:	82 bb       	out	0x12, r24	; 18
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     22e:	8a e6       	ldi	r24, 0x6A	; 106
     230:	8a 95       	dec	r24
     232:	f1 f7       	brne	.-4      	; 0x230 <_Z9port_initv+0x18>
     234:	08 95       	ret

00000236 <_Z14piano_keyboardj>:
	_delay_us(20);
}

void piano_keyboard(unsigned int key){
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
     23e:	64 97       	sbiw	r28, 0x14	; 20
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
	char str[20] = "                  ";
     24a:	23 e1       	ldi	r18, 0x13	; 19
     24c:	e0 e2       	ldi	r30, 0x20	; 32
     24e:	f4 e0       	ldi	r31, 0x04	; 4
     250:	de 01       	movw	r26, r28
     252:	11 96       	adiw	r26, 0x01	; 1
     254:	01 90       	ld	r0, Z+
     256:	0d 92       	st	X+, r0
     258:	2a 95       	dec	r18
     25a:	e1 f7       	brne	.-8      	; 0x254 <_Z14piano_keyboardj+0x1e>
     25c:	1c 8a       	std	Y+20, r1	; 0x14
	if(key == sw1){
     25e:	8e 31       	cpi	r24, 0x1E	; 30
     260:	91 05       	cpc	r25, r1
     262:	49 f4       	brne	.+18     	; 0x276 <_Z14piano_keyboardj+0x40>
		str[1] = 255;
     264:	8f ef       	ldi	r24, 0xFF	; 255
     266:	8a 83       	std	Y+2, r24	; 0x02
		lcd_putsf(0,1,(unsigned char *)str);
     268:	ae 01       	movw	r20, r28
     26a:	4f 5f       	subi	r20, 0xFF	; 255
     26c:	5f 4f       	sbci	r21, 0xFF	; 255
     26e:	61 e0       	ldi	r22, 0x01	; 1
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	5e df       	rcall	.-324    	; 0x130 <_Z9lcd_putsfhhPh>
     274:	56 c0       	rjmp	.+172    	; 0x322 <_Z14piano_keyboardj+0xec>
	}
	else if(key == sw2){
     276:	8e 32       	cpi	r24, 0x2E	; 46
     278:	91 05       	cpc	r25, r1
     27a:	49 f4       	brne	.+18     	; 0x28e <_Z14piano_keyboardj+0x58>
		str[3] = 255;
     27c:	8f ef       	ldi	r24, 0xFF	; 255
     27e:	8c 83       	std	Y+4, r24	; 0x04
		lcd_putsf(0,1,(unsigned char *)str);
     280:	ae 01       	movw	r20, r28
     282:	4f 5f       	subi	r20, 0xFF	; 255
     284:	5f 4f       	sbci	r21, 0xFF	; 255
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	52 df       	rcall	.-348    	; 0x130 <_Z9lcd_putsfhhPh>
     28c:	4a c0       	rjmp	.+148    	; 0x322 <_Z14piano_keyboardj+0xec>
	}
	else if(key == sw3){
     28e:	8e 34       	cpi	r24, 0x4E	; 78
     290:	91 05       	cpc	r25, r1
     292:	49 f4       	brne	.+18     	; 0x2a6 <_Z14piano_keyboardj+0x70>
		str[5] = 255;
     294:	8f ef       	ldi	r24, 0xFF	; 255
     296:	8e 83       	std	Y+6, r24	; 0x06
		lcd_putsf(0,1,(unsigned char *)str);
     298:	ae 01       	movw	r20, r28
     29a:	4f 5f       	subi	r20, 0xFF	; 255
     29c:	5f 4f       	sbci	r21, 0xFF	; 255
     29e:	61 e0       	ldi	r22, 0x01	; 1
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	46 df       	rcall	.-372    	; 0x130 <_Z9lcd_putsfhhPh>
     2a4:	3e c0       	rjmp	.+124    	; 0x322 <_Z14piano_keyboardj+0xec>
	}
	else if(key == sw4){
     2a6:	8d 31       	cpi	r24, 0x1D	; 29
     2a8:	91 05       	cpc	r25, r1
     2aa:	49 f4       	brne	.+18     	; 0x2be <_Z14piano_keyboardj+0x88>
		str[7] = 255;
     2ac:	8f ef       	ldi	r24, 0xFF	; 255
     2ae:	88 87       	std	Y+8, r24	; 0x08
		lcd_putsf(0,1,(unsigned char *)str);
     2b0:	ae 01       	movw	r20, r28
     2b2:	4f 5f       	subi	r20, 0xFF	; 255
     2b4:	5f 4f       	sbci	r21, 0xFF	; 255
     2b6:	61 e0       	ldi	r22, 0x01	; 1
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	3a df       	rcall	.-396    	; 0x130 <_Z9lcd_putsfhhPh>
     2bc:	32 c0       	rjmp	.+100    	; 0x322 <_Z14piano_keyboardj+0xec>
	}
	else if(key == sw5){
     2be:	8d 32       	cpi	r24, 0x2D	; 45
     2c0:	91 05       	cpc	r25, r1
     2c2:	49 f4       	brne	.+18     	; 0x2d6 <_Z14piano_keyboardj+0xa0>
		str[9] = 255;
     2c4:	8f ef       	ldi	r24, 0xFF	; 255
     2c6:	8a 87       	std	Y+10, r24	; 0x0a
		lcd_putsf(0,1,(unsigned char *)str);
     2c8:	ae 01       	movw	r20, r28
     2ca:	4f 5f       	subi	r20, 0xFF	; 255
     2cc:	5f 4f       	sbci	r21, 0xFF	; 255
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	2e df       	rcall	.-420    	; 0x130 <_Z9lcd_putsfhhPh>
     2d4:	26 c0       	rjmp	.+76     	; 0x322 <_Z14piano_keyboardj+0xec>
	}
	else if(key == sw6){
     2d6:	8d 34       	cpi	r24, 0x4D	; 77
     2d8:	91 05       	cpc	r25, r1
     2da:	49 f4       	brne	.+18     	; 0x2ee <_Z14piano_keyboardj+0xb8>
		str[11] = 255;
     2dc:	8f ef       	ldi	r24, 0xFF	; 255
     2de:	8c 87       	std	Y+12, r24	; 0x0c
		lcd_putsf(0,1,(unsigned char *)str);
     2e0:	ae 01       	movw	r20, r28
     2e2:	4f 5f       	subi	r20, 0xFF	; 255
     2e4:	5f 4f       	sbci	r21, 0xFF	; 255
     2e6:	61 e0       	ldi	r22, 0x01	; 1
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	22 df       	rcall	.-444    	; 0x130 <_Z9lcd_putsfhhPh>
     2ec:	1a c0       	rjmp	.+52     	; 0x322 <_Z14piano_keyboardj+0xec>
	}
	else if(key == sw7){
     2ee:	4b 97       	sbiw	r24, 0x1b	; 27
     2f0:	49 f4       	brne	.+18     	; 0x304 <_Z14piano_keyboardj+0xce>
		str[13] = 255;
     2f2:	8f ef       	ldi	r24, 0xFF	; 255
		lcd_putsf(0,1,(unsigned char *)str);
     2f4:	8e 87       	std	Y+14, r24	; 0x0e
     2f6:	ae 01       	movw	r20, r28
     2f8:	4f 5f       	subi	r20, 0xFF	; 255
     2fa:	5f 4f       	sbci	r21, 0xFF	; 255
     2fc:	61 e0       	ldi	r22, 0x01	; 1
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	17 df       	rcall	.-466    	; 0x130 <_Z9lcd_putsfhhPh>
     302:	0f c0       	rjmp	.+30     	; 0x322 <_Z14piano_keyboardj+0xec>
	}
	else{
		sprintf(str,"                  ");
     304:	83 e1       	ldi	r24, 0x13	; 19
     306:	e0 e2       	ldi	r30, 0x20	; 32
     308:	f4 e0       	ldi	r31, 0x04	; 4
     30a:	de 01       	movw	r26, r28
     30c:	11 96       	adiw	r26, 0x01	; 1
     30e:	01 90       	ld	r0, Z+
     310:	0d 92       	st	X+, r0
     312:	8a 95       	dec	r24
		lcd_putsf(0,1,(unsigned char *)str);
     314:	e1 f7       	brne	.-8      	; 0x30e <_Z14piano_keyboardj+0xd8>
     316:	ae 01       	movw	r20, r28
     318:	4f 5f       	subi	r20, 0xFF	; 255
     31a:	5f 4f       	sbci	r21, 0xFF	; 255
     31c:	61 e0       	ldi	r22, 0x01	; 1
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	07 df       	rcall	.-498    	; 0x130 <_Z9lcd_putsfhhPh>
	}
}
     322:	64 96       	adiw	r28, 0x14	; 20
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	f8 94       	cli
     328:	de bf       	out	0x3e, r29	; 62
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	cd bf       	out	0x3d, r28	; 61
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	08 95       	ret

00000334 <_Z10play_pianoj>:

void play_piano(unsigned int key){
	
	if(key == sw1){
     334:	8e 31       	cpi	r24, 0x1E	; 30
     336:	91 05       	cpc	r25, r1
     338:	51 f4       	brne	.+20     	; 0x34e <_Z10play_pianoj+0x1a>
		piano_keyboard(key);
     33a:	8e e1       	ldi	r24, 0x1E	; 30
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	7b df       	rcall	.-266    	; 0x236 <_Z14piano_keyboardj>
	return 0;
}

void MakeSound(int freq){
	if(freq == 0) OCR1A = 0;
	else OCR1A = 8000000 / freq; // 주파수 = 16000000 / (2 * 1(분주비) * OCR1A), OCR1A = 16000000 / (2 * 1) / 주파수
     340:	8b eb       	ldi	r24, 0xBB	; 187
     342:	97 e7       	ldi	r25, 0x77	; 119
     344:	9b bd       	out	0x2b, r25	; 43
     346:	8a bd       	out	0x2a, r24	; 42
void play_piano(unsigned int key){
	
	if(key == sw1){
		piano_keyboard(key);
		MakeSound(do_);
		PORTA = 0b11111110;
     348:	8e ef       	ldi	r24, 0xFE	; 254
     34a:	8b bb       	out	0x1b, r24	; 27
     34c:	08 95       	ret
	}
	else if(key == sw2){
     34e:	8e 32       	cpi	r24, 0x2E	; 46
     350:	91 05       	cpc	r25, r1
     352:	51 f4       	brne	.+20     	; 0x368 <_Z10play_pianoj+0x34>
		piano_keyboard(key);
     354:	8e e2       	ldi	r24, 0x2E	; 46
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	6e df       	rcall	.-292    	; 0x236 <_Z14piano_keyboardj>
	return 0;
}

void MakeSound(int freq){
	if(freq == 0) OCR1A = 0;
	else OCR1A = 8000000 / freq; // 주파수 = 16000000 / (2 * 1(분주비) * OCR1A), OCR1A = 16000000 / (2 * 1) / 주파수
     35a:	87 ea       	ldi	r24, 0xA7	; 167
     35c:	9a e6       	ldi	r25, 0x6A	; 106
     35e:	9b bd       	out	0x2b, r25	; 43
     360:	8a bd       	out	0x2a, r24	; 42
		PORTA = 0b11111110;
	}
	else if(key == sw2){
		piano_keyboard(key);
		MakeSound(re_);
		PORTA = 0b11111101;
     362:	8d ef       	ldi	r24, 0xFD	; 253
     364:	8b bb       	out	0x1b, r24	; 27
     366:	08 95       	ret
	}
	else if(key == sw3){
     368:	8e 34       	cpi	r24, 0x4E	; 78
     36a:	91 05       	cpc	r25, r1
     36c:	51 f4       	brne	.+20     	; 0x382 <_Z10play_pianoj+0x4e>
		piano_keyboard(key);
     36e:	8e e4       	ldi	r24, 0x4E	; 78
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	61 df       	rcall	.-318    	; 0x236 <_Z14piano_keyboardj>
	return 0;
}

void MakeSound(int freq){
	if(freq == 0) OCR1A = 0;
	else OCR1A = 8000000 / freq; // 주파수 = 16000000 / (2 * 1(분주비) * OCR1A), OCR1A = 16000000 / (2 * 1) / 주파수
     374:	8c ef       	ldi	r24, 0xFC	; 252
     376:	9e e5       	ldi	r25, 0x5E	; 94
     378:	9b bd       	out	0x2b, r25	; 43
     37a:	8a bd       	out	0x2a, r24	; 42
		PORTA = 0b11111101;
	}
	else if(key == sw3){
		piano_keyboard(key);
		MakeSound(mi_);
		PORTA = 0b11111011;
     37c:	8b ef       	ldi	r24, 0xFB	; 251
     37e:	8b bb       	out	0x1b, r24	; 27
     380:	08 95       	ret
	}
	else if(key == sw4){
     382:	8d 31       	cpi	r24, 0x1D	; 29
     384:	91 05       	cpc	r25, r1
		piano_keyboard(key);
     386:	51 f4       	brne	.+20     	; 0x39c <_Z10play_pianoj+0x68>
     388:	8d e1       	ldi	r24, 0x1D	; 29
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	54 df       	rcall	.-344    	; 0x236 <_Z14piano_keyboardj>
	return 0;
}

void MakeSound(int freq){
	if(freq == 0) OCR1A = 0;
	else OCR1A = 8000000 / freq; // 주파수 = 16000000 / (2 * 1(분주비) * OCR1A), OCR1A = 16000000 / (2 * 1) / 주파수
     38e:	8a e8       	ldi	r24, 0x8A	; 138
     390:	99 e5       	ldi	r25, 0x59	; 89
     392:	9b bd       	out	0x2b, r25	; 43
     394:	8a bd       	out	0x2a, r24	; 42
		PORTA = 0b11111011;
	}
	else if(key == sw4){
		piano_keyboard(key);
		MakeSound(fa_);
		PORTA = 0b11110111;
     396:	87 ef       	ldi	r24, 0xF7	; 247
     398:	8b bb       	out	0x1b, r24	; 27
     39a:	08 95       	ret
	}
	else if(key == sw5){
     39c:	8d 32       	cpi	r24, 0x2D	; 45
     39e:	91 05       	cpc	r25, r1
		piano_keyboard(key);
     3a0:	51 f4       	brne	.+20     	; 0x3b6 <_Z10play_pianoj+0x82>
     3a2:	8d e2       	ldi	r24, 0x2D	; 45
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	47 df       	rcall	.-370    	; 0x236 <_Z14piano_keyboardj>
	return 0;
}

void MakeSound(int freq){
	if(freq == 0) OCR1A = 0;
	else OCR1A = 8000000 / freq; // 주파수 = 16000000 / (2 * 1(분주비) * OCR1A), OCR1A = 16000000 / (2 * 1) / 주파수
     3a8:	8c ee       	ldi	r24, 0xEC	; 236
     3aa:	9f e4       	ldi	r25, 0x4F	; 79
     3ac:	9b bd       	out	0x2b, r25	; 43
     3ae:	8a bd       	out	0x2a, r24	; 42
		PORTA = 0b11110111;
	}
	else if(key == sw5){
		piano_keyboard(key);
		MakeSound(sol_);
		PORTA = 0b11101111;
     3b0:	8f ee       	ldi	r24, 0xEF	; 239
     3b2:	8b bb       	out	0x1b, r24	; 27
     3b4:	08 95       	ret
	}
	else if(key == sw6){
     3b6:	8d 34       	cpi	r24, 0x4D	; 77
     3b8:	91 05       	cpc	r25, r1
		piano_keyboard(key);
     3ba:	51 f4       	brne	.+20     	; 0x3d0 <_Z10play_pianoj+0x9c>
     3bc:	8d e4       	ldi	r24, 0x4D	; 77
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	3a df       	rcall	.-396    	; 0x236 <_Z14piano_keyboardj>
	return 0;
}

void MakeSound(int freq){
	if(freq == 0) OCR1A = 0;
	else OCR1A = 8000000 / freq; // 주파수 = 16000000 / (2 * 1(분주비) * OCR1A), OCR1A = 16000000 / (2 * 1) / 주파수
     3c2:	85 e0       	ldi	r24, 0x05	; 5
     3c4:	97 e4       	ldi	r25, 0x47	; 71
     3c6:	9b bd       	out	0x2b, r25	; 43
     3c8:	8a bd       	out	0x2a, r24	; 42
		PORTA = 0b11101111;
	}
	else if(key == sw6){
		piano_keyboard(key);
		MakeSound(la_);
		PORTA = 0b11011111;
     3ca:	8f ed       	ldi	r24, 0xDF	; 223
     3cc:	8b bb       	out	0x1b, r24	; 27
	}
	else if(key == sw7){
     3ce:	08 95       	ret
     3d0:	8b 31       	cpi	r24, 0x1B	; 27
     3d2:	91 05       	cpc	r25, r1
		piano_keyboard(key);
     3d4:	51 f4       	brne	.+20     	; 0x3ea <_Z10play_pianoj+0xb6>
     3d6:	8b e1       	ldi	r24, 0x1B	; 27
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	2d df       	rcall	.-422    	; 0x236 <_Z14piano_keyboardj>
	return 0;
}

void MakeSound(int freq){
	if(freq == 0) OCR1A = 0;
	else OCR1A = 8000000 / freq; // 주파수 = 16000000 / (2 * 1(분주비) * OCR1A), OCR1A = 16000000 / (2 * 1) / 주파수
     3dc:	83 e6       	ldi	r24, 0x63	; 99
     3de:	9f e3       	ldi	r25, 0x3F	; 63
     3e0:	9b bd       	out	0x2b, r25	; 43
		PORTA = 0b11011111;
	}
	else if(key == sw7){
		piano_keyboard(key);
		MakeSound(si_);
		PORTA = 0b10111111;
     3e2:	8a bd       	out	0x2a, r24	; 42
     3e4:	8f eb       	ldi	r24, 0xBF	; 191
     3e6:	8b bb       	out	0x1b, r24	; 27
	}
	else{
		piano_keyboard(key);
     3e8:	08 95       	ret
     3ea:	25 df       	rcall	.-438    	; 0x236 <_Z14piano_keyboardj>
		OCR1A = 0;
     3ec:	1b bc       	out	0x2b, r1	; 43
     3ee:	1a bc       	out	0x2a, r1	; 42
		PORTA = 0xff;
     3f0:	8f ef       	ldi	r24, 0xFF	; 255
     3f2:	8b bb       	out	0x1b, r24	; 27
     3f4:	08 95       	ret

000003f6 <_Z13listen_recordiPiS_>:
	}	
}

void listen_record(int array_cnt, int* record_time, int* record_btn){
     3f6:	2f 92       	push	r2
     3f8:	3f 92       	push	r3
     3fa:	4f 92       	push	r4
     3fc:	5f 92       	push	r5
     3fe:	6f 92       	push	r6
     400:	7f 92       	push	r7
     402:	8f 92       	push	r8
     404:	9f 92       	push	r9
     406:	af 92       	push	r10
     408:	bf 92       	push	r11
     40a:	cf 92       	push	r12
     40c:	df 92       	push	r13
     40e:	ef 92       	push	r14
     410:	ff 92       	push	r15
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
	for(int i=0;i<=array_cnt;i++){
     41a:	99 23       	and	r25, r25
     41c:	0c f4       	brge	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	5f c2       	rjmp	.+1214   	; 0x8de <__LOCK_REGION_LENGTH__+0x4de>
     420:	6c 01       	movw	r12, r24
     422:	e4 2e       	mov	r14, r20
     424:	f5 2e       	mov	r15, r21
     426:	c6 2f       	mov	r28, r22
     428:	d7 2f       	mov	r29, r23
     42a:	00 e0       	ldi	r16, 0x00	; 0
     42c:	10 e0       	ldi	r17, 0x00	; 0
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     42e:	0f 2e       	mov	r0, r31
     430:	f0 e9       	ldi	r31, 0x90	; 144
     432:	2f 2e       	mov	r2, r31
     434:	33 24       	eor	r3, r3
     436:	33 94       	inc	r3
     438:	f0 2d       	mov	r31, r0
		if(record_btn[i] == sw1){
     43a:	f7 01       	movw	r30, r14
     43c:	81 91       	ld	r24, Z+
     43e:	91 91       	ld	r25, Z+
     440:	7f 01       	movw	r14, r30
     442:	8e 31       	cpi	r24, 0x1E	; 30
     444:	91 05       	cpc	r25, r1
     446:	09 f0       	breq	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	46 c0       	rjmp	.+140    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
			piano_keyboard(do_);
     44a:	85 e0       	ldi	r24, 0x05	; 5
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	f3 de       	rcall	.-538    	; 0x236 <_Z14piano_keyboardj>
	return 0;
}

void MakeSound(int freq){
	if(freq == 0) OCR1A = 0;
	else OCR1A = 8000000 / freq; // 주파수 = 16000000 / (2 * 1(분주비) * OCR1A), OCR1A = 16000000 / (2 * 1) / 주파수
     450:	8b eb       	ldi	r24, 0xBB	; 187
     452:	97 e7       	ldi	r25, 0x77	; 119
     454:	9b bd       	out	0x2b, r25	; 43
     456:	8a bd       	out	0x2a, r24	; 42
void listen_record(int array_cnt, int* record_time, int* record_btn){
	for(int i=0;i<=array_cnt;i++){
		if(record_btn[i] == sw1){
			piano_keyboard(do_);
			MakeSound(do_);
			PORTA = 0b11111110;
     458:	8e ef       	ldi	r24, 0xFE	; 254
     45a:	8b bb       	out	0x1b, r24	; 27
			_delay_ms(record_time[i+1]);
     45c:	6a 81       	ldd	r22, Y+2	; 0x02
     45e:	7b 81       	ldd	r23, Y+3	; 0x03
     460:	07 2e       	mov	r0, r23
     462:	00 0c       	add	r0, r0
     464:	88 0b       	sbc	r24, r24
     466:	99 0b       	sbc	r25, r25
     468:	02 d6       	rcall	.+3076   	; 0x106e <__floatsisf>
     46a:	2b 01       	movw	r4, r22
     46c:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	4a e7       	ldi	r20, 0x7A	; 122
     474:	55 e4       	ldi	r21, 0x45	; 69
     476:	87 d6       	rcall	.+3342   	; 0x1186 <__mulsf3>
     478:	4b 01       	movw	r8, r22
     47a:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	40 e8       	ldi	r20, 0x80	; 128
     482:	5f e3       	ldi	r21, 0x3F	; 63
     484:	c2 d5       	rcall	.+2948   	; 0x100a <__cmpsf2>
     486:	88 23       	and	r24, r24
     488:	04 f1       	brlt	.+64     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
		__ticks = 1;
	else if (__tmp > 65535)
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	3f ef       	ldi	r19, 0xFF	; 255
     48e:	4f e7       	ldi	r20, 0x7F	; 127
     490:	57 e4       	ldi	r21, 0x47	; 71
     492:	c5 01       	movw	r24, r10
     494:	b4 01       	movw	r22, r8
     496:	73 d6       	rcall	.+3302   	; 0x117e <__gesf2>
     498:	18 16       	cp	r1, r24
     49a:	9c f4       	brge	.+38     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	40 e2       	ldi	r20, 0x20	; 32
     4a2:	51 e4       	ldi	r21, 0x41	; 65
     4a4:	c3 01       	movw	r24, r6
     4a6:	b2 01       	movw	r22, r4
     4a8:	6e d6       	rcall	.+3292   	; 0x1186 <__mulsf3>
     4aa:	b3 d5       	rcall	.+2918   	; 0x1012 <__fixunssfsi>
		while(__ticks)
     4ac:	61 15       	cp	r22, r1
     4ae:	71 05       	cpc	r23, r1
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b2:	0e c2       	rjmp	.+1052   	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     4b4:	c1 01       	movw	r24, r2
     4b6:	01 97       	sbiw	r24, 0x01	; 1
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4ba:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4bc:	71 09       	sbc	r23, r1
     4be:	d1 f7       	brne	.-12     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4c0:	07 c2       	rjmp	.+1038   	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     4c2:	c5 01       	movw	r24, r10
     4c4:	b4 01       	movw	r22, r8
     4c6:	a5 d5       	rcall	.+2890   	; 0x1012 <__fixunssfsi>
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	cb 01       	movw	r24, r22
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
		}
		else if(record_btn[i] == sw2){
     4d4:	fd c1       	rjmp	.+1018   	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     4d6:	8e 32       	cpi	r24, 0x2E	; 46
     4d8:	91 05       	cpc	r25, r1
     4da:	09 f0       	breq	.+2      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			piano_keyboard(re_);
     4dc:	46 c0       	rjmp	.+140    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     4de:	85 e2       	ldi	r24, 0x25	; 37
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	a9 de       	rcall	.-686    	; 0x236 <_Z14piano_keyboardj>
	return 0;
}

void MakeSound(int freq){
	if(freq == 0) OCR1A = 0;
	else OCR1A = 8000000 / freq; // 주파수 = 16000000 / (2 * 1(분주비) * OCR1A), OCR1A = 16000000 / (2 * 1) / 주파수
     4e4:	e7 ea       	ldi	r30, 0xA7	; 167
     4e6:	fa e6       	ldi	r31, 0x6A	; 106
     4e8:	fb bd       	out	0x2b, r31	; 43
			_delay_ms(record_time[i+1]);
		}
		else if(record_btn[i] == sw2){
			piano_keyboard(re_);
			MakeSound(re_);
			PORTA = 0b11111101;
     4ea:	ea bd       	out	0x2a, r30	; 42
     4ec:	8d ef       	ldi	r24, 0xFD	; 253
			_delay_ms(record_time[i+1]);
     4ee:	8b bb       	out	0x1b, r24	; 27
     4f0:	6a 81       	ldd	r22, Y+2	; 0x02
     4f2:	7b 81       	ldd	r23, Y+3	; 0x03
     4f4:	07 2e       	mov	r0, r23
     4f6:	00 0c       	add	r0, r0
     4f8:	88 0b       	sbc	r24, r24
     4fa:	99 0b       	sbc	r25, r25
     4fc:	b8 d5       	rcall	.+2928   	; 0x106e <__floatsisf>
     4fe:	2b 01       	movw	r4, r22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     500:	3c 01       	movw	r6, r24
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	4a e7       	ldi	r20, 0x7A	; 122
     508:	55 e4       	ldi	r21, 0x45	; 69
     50a:	3d d6       	rcall	.+3194   	; 0x1186 <__mulsf3>
     50c:	4b 01       	movw	r8, r22
	if (__tmp < 1.0)
     50e:	5c 01       	movw	r10, r24
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	40 e8       	ldi	r20, 0x80	; 128
     516:	5f e3       	ldi	r21, 0x3F	; 63
     518:	78 d5       	rcall	.+2800   	; 0x100a <__cmpsf2>
     51a:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
     51c:	04 f1       	brlt	.+64     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	3f ef       	ldi	r19, 0xFF	; 255
     522:	4f e7       	ldi	r20, 0x7F	; 127
     524:	57 e4       	ldi	r21, 0x47	; 71
     526:	c5 01       	movw	r24, r10
     528:	b4 01       	movw	r22, r8
     52a:	29 d6       	rcall	.+3154   	; 0x117e <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     52c:	18 16       	cp	r1, r24
     52e:	9c f4       	brge	.+38     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	40 e2       	ldi	r20, 0x20	; 32
     536:	51 e4       	ldi	r21, 0x41	; 65
     538:	c3 01       	movw	r24, r6
     53a:	b2 01       	movw	r22, r4
     53c:	24 d6       	rcall	.+3144   	; 0x1186 <__mulsf3>
		while(__ticks)
     53e:	69 d5       	rcall	.+2770   	; 0x1012 <__fixunssfsi>
     540:	61 15       	cp	r22, r1
     542:	71 05       	cpc	r23, r1
     544:	09 f4       	brne	.+2      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     546:	c4 c1       	rjmp	.+904    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     548:	c1 01       	movw	r24, r2
     54a:	01 97       	sbiw	r24, 0x01	; 1
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     54c:	f1 f7       	brne	.-4      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     54e:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     550:	71 09       	sbc	r23, r1
     552:	d1 f7       	brne	.-12     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     554:	bd c1       	rjmp	.+890    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     556:	c5 01       	movw	r24, r10
     558:	b4 01       	movw	r22, r8
     55a:	5b d5       	rcall	.+2742   	; 0x1012 <__fixunssfsi>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     55c:	02 c0       	rjmp	.+4      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	cb 01       	movw	r24, r22
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
		}
		else if(record_btn[i] == sw3){
     568:	b3 c1       	rjmp	.+870    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     56a:	8e 34       	cpi	r24, 0x4E	; 78
     56c:	91 05       	cpc	r25, r1
			piano_keyboard(mi_);
     56e:	09 f0       	breq	.+2      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     570:	46 c0       	rjmp	.+140    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
     572:	89 e4       	ldi	r24, 0x49	; 73
     574:	91 e0       	ldi	r25, 0x01	; 1
	return 0;
}

void MakeSound(int freq){
	if(freq == 0) OCR1A = 0;
	else OCR1A = 8000000 / freq; // 주파수 = 16000000 / (2 * 1(분주비) * OCR1A), OCR1A = 16000000 / (2 * 1) / 주파수
     576:	5f de       	rcall	.-834    	; 0x236 <_Z14piano_keyboardj>
     578:	8c ef       	ldi	r24, 0xFC	; 252
     57a:	9e e5       	ldi	r25, 0x5E	; 94
			_delay_ms(record_time[i+1]);
		}
		else if(record_btn[i] == sw3){
			piano_keyboard(mi_);
			MakeSound(mi_);
			PORTA = 0b11111011;
     57c:	9b bd       	out	0x2b, r25	; 43
     57e:	8a bd       	out	0x2a, r24	; 42
			_delay_ms(record_time[i+1]);
     580:	8b ef       	ldi	r24, 0xFB	; 251
     582:	8b bb       	out	0x1b, r24	; 27
     584:	6a 81       	ldd	r22, Y+2	; 0x02
     586:	7b 81       	ldd	r23, Y+3	; 0x03
     588:	07 2e       	mov	r0, r23
     58a:	00 0c       	add	r0, r0
     58c:	88 0b       	sbc	r24, r24
     58e:	99 0b       	sbc	r25, r25
     590:	6e d5       	rcall	.+2780   	; 0x106e <__floatsisf>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     592:	2b 01       	movw	r4, r22
     594:	3c 01       	movw	r6, r24
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	4a e7       	ldi	r20, 0x7A	; 122
     59c:	55 e4       	ldi	r21, 0x45	; 69
     59e:	f3 d5       	rcall	.+3046   	; 0x1186 <__mulsf3>
	if (__tmp < 1.0)
     5a0:	4b 01       	movw	r8, r22
     5a2:	5c 01       	movw	r10, r24
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	40 e8       	ldi	r20, 0x80	; 128
     5aa:	5f e3       	ldi	r21, 0x3F	; 63
		__ticks = 1;
	else if (__tmp > 65535)
     5ac:	2e d5       	rcall	.+2652   	; 0x100a <__cmpsf2>
     5ae:	88 23       	and	r24, r24
     5b0:	04 f1       	brlt	.+64     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	3f ef       	ldi	r19, 0xFF	; 255
     5b6:	4f e7       	ldi	r20, 0x7F	; 127
     5b8:	57 e4       	ldi	r21, 0x47	; 71
     5ba:	c5 01       	movw	r24, r10
     5bc:	b4 01       	movw	r22, r8
     5be:	df d5       	rcall	.+3006   	; 0x117e <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5c0:	18 16       	cp	r1, r24
     5c2:	9c f4       	brge	.+38     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	40 e2       	ldi	r20, 0x20	; 32
     5ca:	51 e4       	ldi	r21, 0x41	; 65
     5cc:	c3 01       	movw	r24, r6
     5ce:	b2 01       	movw	r22, r4
     5d0:	da d5       	rcall	.+2996   	; 0x1186 <__mulsf3>
		while(__ticks)
     5d2:	1f d5       	rcall	.+2622   	; 0x1012 <__fixunssfsi>
     5d4:	61 15       	cp	r22, r1
     5d6:	71 05       	cpc	r23, r1
     5d8:	09 f4       	brne	.+2      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
     5da:	7a c1       	rjmp	.+756    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     5dc:	c1 01       	movw	r24, r2
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	f1 f7       	brne	.-4      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5e2:	61 50       	subi	r22, 0x01	; 1
     5e4:	71 09       	sbc	r23, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5e6:	d1 f7       	brne	.-12     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
     5e8:	73 c1       	rjmp	.+742    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     5ea:	c5 01       	movw	r24, r10
     5ec:	b4 01       	movw	r22, r8
     5ee:	11 d5       	rcall	.+2594   	; 0x1012 <__fixunssfsi>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	cb 01       	movw	r24, r22
     5f8:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(record_btn[i] == sw4){
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
     5fc:	69 c1       	rjmp	.+722    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     5fe:	8d 31       	cpi	r24, 0x1D	; 29
			piano_keyboard(fa_);
     600:	91 05       	cpc	r25, r1
     602:	09 f0       	breq	.+2      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
     604:	46 c0       	rjmp	.+140    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
     606:	8d e5       	ldi	r24, 0x5D	; 93
	return 0;
}

void MakeSound(int freq){
	if(freq == 0) OCR1A = 0;
	else OCR1A = 8000000 / freq; // 주파수 = 16000000 / (2 * 1(분주비) * OCR1A), OCR1A = 16000000 / (2 * 1) / 주파수
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	15 de       	rcall	.-982    	; 0x236 <_Z14piano_keyboardj>
     60c:	ea e8       	ldi	r30, 0x8A	; 138
			_delay_ms(record_time[i+1]);
		}
		else if(record_btn[i] == sw4){
			piano_keyboard(fa_);
			MakeSound(fa_);
			PORTA = 0b11110111;
     60e:	f9 e5       	ldi	r31, 0x59	; 89
     610:	fb bd       	out	0x2b, r31	; 43
			_delay_ms(record_time[i+1]);
     612:	ea bd       	out	0x2a, r30	; 42
     614:	87 ef       	ldi	r24, 0xF7	; 247
     616:	8b bb       	out	0x1b, r24	; 27
     618:	6a 81       	ldd	r22, Y+2	; 0x02
     61a:	7b 81       	ldd	r23, Y+3	; 0x03
     61c:	07 2e       	mov	r0, r23
     61e:	00 0c       	add	r0, r0
     620:	88 0b       	sbc	r24, r24
     622:	99 0b       	sbc	r25, r25

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     624:	24 d5       	rcall	.+2632   	; 0x106e <__floatsisf>
     626:	2b 01       	movw	r4, r22
     628:	3c 01       	movw	r6, r24
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	4a e7       	ldi	r20, 0x7A	; 122
	if (__tmp < 1.0)
     630:	55 e4       	ldi	r21, 0x45	; 69
     632:	a9 d5       	rcall	.+2898   	; 0x1186 <__mulsf3>
     634:	4b 01       	movw	r8, r22
     636:	5c 01       	movw	r10, r24
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
		__ticks = 1;
	else if (__tmp > 65535)
     640:	e4 d4       	rcall	.+2504   	; 0x100a <__cmpsf2>
     642:	88 23       	and	r24, r24
     644:	04 f1       	brlt	.+64     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	3f ef       	ldi	r19, 0xFF	; 255
     64a:	4f e7       	ldi	r20, 0x7F	; 127
     64c:	57 e4       	ldi	r21, 0x47	; 71
     64e:	c5 01       	movw	r24, r10
     650:	b4 01       	movw	r22, r8
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     652:	95 d5       	rcall	.+2858   	; 0x117e <__gesf2>
     654:	18 16       	cp	r1, r24
     656:	9c f4       	brge	.+38     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	40 e2       	ldi	r20, 0x20	; 32
     65e:	51 e4       	ldi	r21, 0x41	; 65
     660:	c3 01       	movw	r24, r6
     662:	b2 01       	movw	r22, r4
		while(__ticks)
     664:	90 d5       	rcall	.+2848   	; 0x1186 <__mulsf3>
     666:	d5 d4       	rcall	.+2474   	; 0x1012 <__fixunssfsi>
     668:	61 15       	cp	r22, r1
     66a:	71 05       	cpc	r23, r1
     66c:	09 f4       	brne	.+2      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     66e:	30 c1       	rjmp	.+608    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     670:	c1 01       	movw	r24, r2
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     676:	61 50       	subi	r22, 0x01	; 1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     678:	71 09       	sbc	r23, r1
     67a:	d1 f7       	brne	.-12     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     67c:	29 c1       	rjmp	.+594    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     67e:	c5 01       	movw	r24, r10
     680:	b4 01       	movw	r22, r8

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     682:	c7 d4       	rcall	.+2446   	; 0x1012 <__fixunssfsi>
     684:	02 c0       	rjmp	.+4      	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
     686:	61 e0       	ldi	r22, 0x01	; 1
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	cb 01       	movw	r24, r22
		}
		else if(record_btn[i] == sw5){
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
     690:	1f c1       	rjmp	.+574    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
			piano_keyboard(sol_);
     692:	8d 32       	cpi	r24, 0x2D	; 45
     694:	91 05       	cpc	r25, r1
     696:	09 f0       	breq	.+2      	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
     698:	46 c0       	rjmp	.+140    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
	return 0;
}

void MakeSound(int freq){
	if(freq == 0) OCR1A = 0;
	else OCR1A = 8000000 / freq; // 주파수 = 16000000 / (2 * 1(분주비) * OCR1A), OCR1A = 16000000 / (2 * 1) / 주파수
     69a:	87 e8       	ldi	r24, 0x87	; 135
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	cb dd       	rcall	.-1130   	; 0x236 <_Z14piano_keyboardj>
			_delay_ms(record_time[i+1]);
		}
		else if(record_btn[i] == sw5){
			piano_keyboard(sol_);
			MakeSound(sol_);
			PORTA = 0b11101111;
     6a0:	8c ee       	ldi	r24, 0xEC	; 236
     6a2:	9f e4       	ldi	r25, 0x4F	; 79
			_delay_ms(record_time[i+1]);
     6a4:	9b bd       	out	0x2b, r25	; 43
     6a6:	8a bd       	out	0x2a, r24	; 42
     6a8:	8f ee       	ldi	r24, 0xEF	; 239
     6aa:	8b bb       	out	0x1b, r24	; 27
     6ac:	6a 81       	ldd	r22, Y+2	; 0x02
     6ae:	7b 81       	ldd	r23, Y+3	; 0x03
     6b0:	07 2e       	mov	r0, r23
     6b2:	00 0c       	add	r0, r0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6b4:	88 0b       	sbc	r24, r24
     6b6:	99 0b       	sbc	r25, r25
     6b8:	da d4       	rcall	.+2484   	; 0x106e <__floatsisf>
     6ba:	2b 01       	movw	r4, r22
     6bc:	3c 01       	movw	r6, r24
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	4a e7       	ldi	r20, 0x7A	; 122
	if (__tmp < 1.0)
     6c4:	55 e4       	ldi	r21, 0x45	; 69
     6c6:	5f d5       	rcall	.+2750   	; 0x1186 <__mulsf3>
     6c8:	4b 01       	movw	r8, r22
     6ca:	5c 01       	movw	r10, r24
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	40 e8       	ldi	r20, 0x80	; 128
		__ticks = 1;
	else if (__tmp > 65535)
     6d2:	5f e3       	ldi	r21, 0x3F	; 63
     6d4:	9a d4       	rcall	.+2356   	; 0x100a <__cmpsf2>
     6d6:	88 23       	and	r24, r24
     6d8:	04 f1       	brlt	.+64     	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	3f ef       	ldi	r19, 0xFF	; 255
     6de:	4f e7       	ldi	r20, 0x7F	; 127
     6e0:	57 e4       	ldi	r21, 0x47	; 71
     6e2:	c5 01       	movw	r24, r10
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6e4:	b4 01       	movw	r22, r8
     6e6:	4b d5       	rcall	.+2710   	; 0x117e <__gesf2>
     6e8:	18 16       	cp	r1, r24
     6ea:	9c f4       	brge	.+38     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e2       	ldi	r20, 0x20	; 32
     6f2:	51 e4       	ldi	r21, 0x41	; 65
     6f4:	c3 01       	movw	r24, r6
     6f6:	b2 01       	movw	r22, r4
		while(__ticks)
     6f8:	46 d5       	rcall	.+2700   	; 0x1186 <__mulsf3>
     6fa:	8b d4       	rcall	.+2326   	; 0x1012 <__fixunssfsi>
     6fc:	61 15       	cp	r22, r1
     6fe:	71 05       	cpc	r23, r1
     700:	09 f4       	brne	.+2      	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
     702:	e6 c0       	rjmp	.+460    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     704:	c1 01       	movw	r24, r2
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     70a:	61 50       	subi	r22, 0x01	; 1
     70c:	71 09       	sbc	r23, r1
     70e:	d1 f7       	brne	.-12     	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
     710:	df c0       	rjmp	.+446    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     712:	c5 01       	movw	r24, r10
     714:	b4 01       	movw	r22, r8
     716:	7d d4       	rcall	.+2298   	; 0x1012 <__fixunssfsi>
     718:	02 c0       	rjmp	.+4      	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
     71a:	61 e0       	ldi	r22, 0x01	; 1
     71c:	70 e0       	ldi	r23, 0x00	; 0
		}
		else if(record_btn[i] == sw6){
     71e:	cb 01       	movw	r24, r22
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
			piano_keyboard(la_);
     724:	d5 c0       	rjmp	.+426    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     726:	8d 34       	cpi	r24, 0x4D	; 77
     728:	91 05       	cpc	r25, r1
     72a:	09 f0       	breq	.+2      	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
	return 0;
}

void MakeSound(int freq){
	if(freq == 0) OCR1A = 0;
	else OCR1A = 8000000 / freq; // 주파수 = 16000000 / (2 * 1(분주비) * OCR1A), OCR1A = 16000000 / (2 * 1) / 주파수
     72c:	46 c0       	rjmp	.+140    	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
     72e:	88 eb       	ldi	r24, 0xB8	; 184
     730:	91 e0       	ldi	r25, 0x01	; 1
			_delay_ms(record_time[i+1]);
		}
		else if(record_btn[i] == sw6){
			piano_keyboard(la_);
			MakeSound(la_);
			PORTA = 0b11011111;
     732:	81 dd       	rcall	.-1278   	; 0x236 <_Z14piano_keyboardj>
			_delay_ms(record_time[i+1]);
     734:	e5 e0       	ldi	r30, 0x05	; 5
     736:	f7 e4       	ldi	r31, 0x47	; 71
     738:	fb bd       	out	0x2b, r31	; 43
     73a:	ea bd       	out	0x2a, r30	; 42
     73c:	ff ed       	ldi	r31, 0xDF	; 223
     73e:	fb bb       	out	0x1b, r31	; 27
     740:	6a 81       	ldd	r22, Y+2	; 0x02
     742:	7b 81       	ldd	r23, Y+3	; 0x03
     744:	07 2e       	mov	r0, r23
     746:	00 0c       	add	r0, r0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     748:	88 0b       	sbc	r24, r24
     74a:	99 0b       	sbc	r25, r25
     74c:	90 d4       	rcall	.+2336   	; 0x106e <__floatsisf>
     74e:	2b 01       	movw	r4, r22
     750:	3c 01       	movw	r6, r24
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     756:	4a e7       	ldi	r20, 0x7A	; 122
     758:	55 e4       	ldi	r21, 0x45	; 69
     75a:	15 d5       	rcall	.+2602   	; 0x1186 <__mulsf3>
     75c:	4b 01       	movw	r8, r22
     75e:	5c 01       	movw	r10, r24
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
     764:	40 e8       	ldi	r20, 0x80	; 128
     766:	5f e3       	ldi	r21, 0x3F	; 63
     768:	50 d4       	rcall	.+2208   	; 0x100a <__cmpsf2>
     76a:	88 23       	and	r24, r24
     76c:	04 f1       	brlt	.+64     	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	3f ef       	ldi	r19, 0xFF	; 255
     772:	4f e7       	ldi	r20, 0x7F	; 127
     774:	57 e4       	ldi	r21, 0x47	; 71
     776:	c5 01       	movw	r24, r10
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     778:	b4 01       	movw	r22, r8
     77a:	01 d5       	rcall	.+2562   	; 0x117e <__gesf2>
     77c:	18 16       	cp	r1, r24
     77e:	9c f4       	brge	.+38     	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	40 e2       	ldi	r20, 0x20	; 32
     786:	51 e4       	ldi	r21, 0x41	; 65
     788:	c3 01       	movw	r24, r6
		while(__ticks)
     78a:	b2 01       	movw	r22, r4
     78c:	fc d4       	rcall	.+2552   	; 0x1186 <__mulsf3>
     78e:	41 d4       	rcall	.+2178   	; 0x1012 <__fixunssfsi>
     790:	61 15       	cp	r22, r1
     792:	71 05       	cpc	r23, r1
     794:	09 f4       	brne	.+2      	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     796:	9c c0       	rjmp	.+312    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     798:	c1 01       	movw	r24, r2
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	f1 f7       	brne	.-4      	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     79e:	61 50       	subi	r22, 0x01	; 1
     7a0:	71 09       	sbc	r23, r1
     7a2:	d1 f7       	brne	.-12     	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
     7a4:	95 c0       	rjmp	.+298    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     7a6:	c5 01       	movw	r24, r10
     7a8:	b4 01       	movw	r22, r8
     7aa:	33 d4       	rcall	.+2150   	; 0x1012 <__fixunssfsi>
     7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
     7ae:	61 e0       	ldi	r22, 0x01	; 1
     7b0:	70 e0       	ldi	r23, 0x00	; 0
		}
		else if(record_btn[i] == sw7){
     7b2:	cb 01       	movw	r24, r22
     7b4:	01 97       	sbiw	r24, 0x01	; 1
			piano_keyboard(si_);
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <__LOCK_REGION_LENGTH__+0x3b4>
     7b8:	8b c0       	rjmp	.+278    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     7ba:	4b 97       	sbiw	r24, 0x1b	; 27
	return 0;
}

void MakeSound(int freq){
	if(freq == 0) OCR1A = 0;
	else OCR1A = 8000000 / freq; // 주파수 = 16000000 / (2 * 1(분주비) * OCR1A), OCR1A = 16000000 / (2 * 1) / 주파수
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
     7be:	46 c0       	rjmp	.+140    	; 0x84c <__LOCK_REGION_LENGTH__+0x44c>
     7c0:	8d ee       	ldi	r24, 0xED	; 237
     7c2:	91 e0       	ldi	r25, 0x01	; 1
			_delay_ms(record_time[i+1]);
		}
		else if(record_btn[i] == sw7){
			piano_keyboard(si_);
			MakeSound(si_);
			PORTA = 0b10111111;
     7c4:	38 dd       	rcall	.-1424   	; 0x236 <_Z14piano_keyboardj>
     7c6:	83 e6       	ldi	r24, 0x63	; 99
			_delay_ms(record_time[i+1]);
     7c8:	9f e3       	ldi	r25, 0x3F	; 63
     7ca:	9b bd       	out	0x2b, r25	; 43
     7cc:	8a bd       	out	0x2a, r24	; 42
     7ce:	9f eb       	ldi	r25, 0xBF	; 191
     7d0:	9b bb       	out	0x1b, r25	; 27
     7d2:	6a 81       	ldd	r22, Y+2	; 0x02
     7d4:	7b 81       	ldd	r23, Y+3	; 0x03
     7d6:	07 2e       	mov	r0, r23
     7d8:	00 0c       	add	r0, r0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7da:	88 0b       	sbc	r24, r24
     7dc:	99 0b       	sbc	r25, r25
     7de:	47 d4       	rcall	.+2190   	; 0x106e <__floatsisf>
     7e0:	2b 01       	movw	r4, r22
     7e2:	3c 01       	movw	r6, r24
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     7e8:	4a e7       	ldi	r20, 0x7A	; 122
     7ea:	55 e4       	ldi	r21, 0x45	; 69
     7ec:	cc d4       	rcall	.+2456   	; 0x1186 <__mulsf3>
     7ee:	4b 01       	movw	r8, r22
     7f0:	5c 01       	movw	r10, r24
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
     7f6:	40 e8       	ldi	r20, 0x80	; 128
     7f8:	5f e3       	ldi	r21, 0x3F	; 63
     7fa:	07 d4       	rcall	.+2062   	; 0x100a <__cmpsf2>
     7fc:	88 23       	and	r24, r24
     7fe:	04 f1       	brlt	.+64     	; 0x840 <__LOCK_REGION_LENGTH__+0x440>
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	3f ef       	ldi	r19, 0xFF	; 255
     804:	4f e7       	ldi	r20, 0x7F	; 127
     806:	57 e4       	ldi	r21, 0x47	; 71
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     808:	c5 01       	movw	r24, r10
     80a:	b4 01       	movw	r22, r8
     80c:	b8 d4       	rcall	.+2416   	; 0x117e <__gesf2>
     80e:	18 16       	cp	r1, r24
     810:	9c f4       	brge	.+38     	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	40 e2       	ldi	r20, 0x20	; 32
     818:	51 e4       	ldi	r21, 0x41	; 65
		while(__ticks)
     81a:	c3 01       	movw	r24, r6
     81c:	b2 01       	movw	r22, r4
     81e:	b3 d4       	rcall	.+2406   	; 0x1186 <__mulsf3>
     820:	f8 d3       	rcall	.+2032   	; 0x1012 <__fixunssfsi>
     822:	61 15       	cp	r22, r1
     824:	71 05       	cpc	r23, r1
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     826:	09 f4       	brne	.+2      	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
     828:	53 c0       	rjmp	.+166    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     82a:	c1 01       	movw	r24, r2
     82c:	01 97       	sbiw	r24, 0x01	; 1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     82e:	f1 f7       	brne	.-4      	; 0x82c <__LOCK_REGION_LENGTH__+0x42c>
     830:	61 50       	subi	r22, 0x01	; 1
     832:	71 09       	sbc	r23, r1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     834:	d1 f7       	brne	.-12     	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
     836:	4c c0       	rjmp	.+152    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     838:	c5 01       	movw	r24, r10
     83a:	b4 01       	movw	r22, r8
     83c:	ea d3       	rcall	.+2004   	; 0x1012 <__fixunssfsi>
     83e:	02 c0       	rjmp	.+4      	; 0x844 <__LOCK_REGION_LENGTH__+0x444>
		}
		else{
			piano_keyboard(0);
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	cb 01       	movw	r24, r22
			OCR1A = 0;
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	f1 f7       	brne	.-4      	; 0x846 <__LOCK_REGION_LENGTH__+0x446>
			PORTA = 0xff;
     84a:	42 c0       	rjmp	.+132    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     84c:	80 e0       	ldi	r24, 0x00	; 0
			_delay_ms(record_time[i+1]);
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	f2 dc       	rcall	.-1564   	; 0x236 <_Z14piano_keyboardj>
     852:	1b bc       	out	0x2b, r1	; 43
     854:	1a bc       	out	0x2a, r1	; 42
     856:	ef ef       	ldi	r30, 0xFF	; 255
     858:	eb bb       	out	0x1b, r30	; 27
     85a:	6a 81       	ldd	r22, Y+2	; 0x02
     85c:	7b 81       	ldd	r23, Y+3	; 0x03
     85e:	07 2e       	mov	r0, r23
     860:	00 0c       	add	r0, r0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     862:	88 0b       	sbc	r24, r24
     864:	99 0b       	sbc	r25, r25
     866:	03 d4       	rcall	.+2054   	; 0x106e <__floatsisf>
     868:	2b 01       	movw	r4, r22
     86a:	3c 01       	movw	r6, r24
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	4a e7       	ldi	r20, 0x7A	; 122
	if (__tmp < 1.0)
     872:	55 e4       	ldi	r21, 0x45	; 69
     874:	88 d4       	rcall	.+2320   	; 0x1186 <__mulsf3>
     876:	4b 01       	movw	r8, r22
     878:	5c 01       	movw	r10, r24
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	40 e8       	ldi	r20, 0x80	; 128
     880:	5f e3       	ldi	r21, 0x3F	; 63
		__ticks = 1;
	else if (__tmp > 65535)
     882:	c3 d3       	rcall	.+1926   	; 0x100a <__cmpsf2>
     884:	88 23       	and	r24, r24
     886:	fc f0       	brlt	.+62     	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f e7       	ldi	r20, 0x7F	; 127
     88e:	57 e4       	ldi	r21, 0x47	; 71
     890:	c5 01       	movw	r24, r10
     892:	b4 01       	movw	r22, r8
     894:	74 d4       	rcall	.+2280   	; 0x117e <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     896:	18 16       	cp	r1, r24
     898:	94 f4       	brge	.+36     	; 0x8be <__LOCK_REGION_LENGTH__+0x4be>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e2       	ldi	r20, 0x20	; 32
     8a0:	51 e4       	ldi	r21, 0x41	; 65
     8a2:	c3 01       	movw	r24, r6
     8a4:	b2 01       	movw	r22, r4
     8a6:	6f d4       	rcall	.+2270   	; 0x1186 <__mulsf3>
     8a8:	b4 d3       	rcall	.+1896   	; 0x1012 <__fixunssfsi>
		while(__ticks)
     8aa:	61 15       	cp	r22, r1
     8ac:	71 05       	cpc	r23, r1
     8ae:	81 f0       	breq	.+32     	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     8b0:	c1 01       	movw	r24, r2
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <__LOCK_REGION_LENGTH__+0x4b2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8b6:	61 50       	subi	r22, 0x01	; 1
     8b8:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ba:	d1 f7       	brne	.-12     	; 0x8b0 <__LOCK_REGION_LENGTH__+0x4b0>
     8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8be:	c5 01       	movw	r24, r10
     8c0:	b4 01       	movw	r22, r8
     8c2:	a7 d3       	rcall	.+1870   	; 0x1012 <__fixunssfsi>
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <__LOCK_REGION_LENGTH__+0x4ca>
     8c6:	61 e0       	ldi	r22, 0x01	; 1

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	cb 01       	movw	r24, r22
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	f1 f7       	brne	.-4      	; 0x8cc <__LOCK_REGION_LENGTH__+0x4cc>
     8d0:	0f 5f       	subi	r16, 0xFF	; 255
		PORTA = 0xff;
	}	
}

void listen_record(int array_cnt, int* record_time, int* record_btn){
	for(int i=0;i<=array_cnt;i++){
     8d2:	1f 4f       	sbci	r17, 0xFF	; 255
     8d4:	22 96       	adiw	r28, 0x02	; 2
     8d6:	c0 16       	cp	r12, r16
     8d8:	d1 06       	cpc	r13, r17
     8da:	0c f0       	brlt	.+2      	; 0x8de <__LOCK_REGION_LENGTH__+0x4de>
     8dc:	ae cd       	rjmp	.-1188   	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     8de:	df 91       	pop	r29
			OCR1A = 0;
			PORTA = 0xff;
			_delay_ms(record_time[i+1]);
		}
	}	
}
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	df 90       	pop	r13
     8ec:	cf 90       	pop	r12
     8ee:	bf 90       	pop	r11
     8f0:	af 90       	pop	r10
     8f2:	9f 90       	pop	r9
     8f4:	8f 90       	pop	r8
     8f6:	7f 90       	pop	r7
     8f8:	6f 90       	pop	r6
     8fa:	5f 90       	pop	r5
     8fc:	4f 90       	pop	r4
     8fe:	3f 90       	pop	r3
     900:	2f 90       	pop	r2
     902:	08 95       	ret

00000904 <_Z7powerOnPcS_b>:
     904:	cf 93       	push	r28

void powerOn(char *str1, char *str2, bool a){
     906:	df 93       	push	r29
	if(a){
     908:	44 23       	and	r20, r20
     90a:	29 f1       	breq	.+74     	; 0x956 <_Z7powerOnPcS_b+0x52>
     90c:	eb 01       	movw	r28, r22
     90e:	ac 01       	movw	r20, r24
		sprintf(str1,"  PIANO START");
     910:	8e e0       	ldi	r24, 0x0E	; 14
     912:	e4 e3       	ldi	r30, 0x34	; 52
     914:	f4 e0       	ldi	r31, 0x04	; 4
     916:	da 01       	movw	r26, r20
     918:	01 90       	ld	r0, Z+
     91a:	0d 92       	st	X+, r0
     91c:	8a 95       	dec	r24
     91e:	e1 f7       	brne	.-8      	; 0x918 <_Z7powerOnPcS_b+0x14>
		lcd_putsf(0,0,(unsigned char *)str1);
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	05 dc       	rcall	.-2038   	; 0x130 <_Z9lcd_putsfhhPh>
		sprintf(str2,"   POWER ON!");
     926:	8d e0       	ldi	r24, 0x0D	; 13
     928:	e2 e4       	ldi	r30, 0x42	; 66
     92a:	f4 e0       	ldi	r31, 0x04	; 4
     92c:	de 01       	movw	r26, r28
     92e:	01 90       	ld	r0, Z+
     930:	0d 92       	st	X+, r0
     932:	8a 95       	dec	r24
     934:	e1 f7       	brne	.-8      	; 0x92e <_Z7powerOnPcS_b+0x2a>
		lcd_putsf(0,1,(unsigned char *)str2);
     936:	ae 01       	movw	r20, r28
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	f9 db       	rcall	.-2062   	; 0x130 <_Z9lcd_putsfhhPh>
//		_delay_ms(3000);
		sprintf(str2,"                    ");
     93e:	85 e1       	ldi	r24, 0x15	; 21
     940:	ef e4       	ldi	r30, 0x4F	; 79
     942:	f4 e0       	ldi	r31, 0x04	; 4
     944:	de 01       	movw	r26, r28
     946:	01 90       	ld	r0, Z+
     948:	0d 92       	st	X+, r0
     94a:	8a 95       	dec	r24
     94c:	e1 f7       	brne	.-8      	; 0x946 <_Z7powerOnPcS_b+0x42>
		lcd_putsf(0,1,(unsigned char *)str2);
     94e:	ae 01       	movw	r20, r28
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	ed db       	rcall	.-2086   	; 0x130 <_Z9lcd_putsfhhPh>
	}
}
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	08 95       	ret

0000095c <_Z8powerOffPcS_b>:

void powerOff(char *str1, char *str2, bool a){
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	ec 01       	movw	r28, r24
     966:	8b 01       	movw	r16, r22
	if(a){
     968:	44 23       	and	r20, r20
     96a:	49 f1       	breq	.+82     	; 0x9be <_Z8powerOffPcS_b+0x62>
		sprintf(str1,"  PIANO SYSTEM");
     96c:	8f e0       	ldi	r24, 0x0F	; 15
     96e:	e4 e6       	ldi	r30, 0x64	; 100
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	de 01       	movw	r26, r28
     974:	01 90       	ld	r0, Z+
     976:	0d 92       	st	X+, r0
     978:	8a 95       	dec	r24
     97a:	e1 f7       	brne	.-8      	; 0x974 <_Z8powerOffPcS_b+0x18>
		lcd_putsf(0,0,(unsigned char *)str1);
     97c:	ae 01       	movw	r20, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	d6 db       	rcall	.-2132   	; 0x130 <_Z9lcd_putsfhhPh>
		sprintf(str2,"   POWER OFF!");
     984:	8e e0       	ldi	r24, 0x0E	; 14
     986:	e3 e7       	ldi	r30, 0x73	; 115
     988:	f4 e0       	ldi	r31, 0x04	; 4
     98a:	d8 01       	movw	r26, r16
     98c:	01 90       	ld	r0, Z+
     98e:	0d 92       	st	X+, r0
     990:	8a 95       	dec	r24
     992:	e1 f7       	brne	.-8      	; 0x98c <_Z8powerOffPcS_b+0x30>
		lcd_putsf(0,1,(unsigned char *)str2);
     994:	a8 01       	movw	r20, r16
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	ca db       	rcall	.-2156   	; 0x130 <_Z9lcd_putsfhhPh>
//		_delay_ms(1000);
		sprintf(str1,"    GOOD BYE    ");
     99c:	81 e1       	ldi	r24, 0x11	; 17
     99e:	e1 e8       	ldi	r30, 0x81	; 129
     9a0:	f4 e0       	ldi	r31, 0x04	; 4
     9a2:	de 01       	movw	r26, r28
     9a4:	01 90       	ld	r0, Z+
     9a6:	0d 92       	st	X+, r0
     9a8:	8a 95       	dec	r24
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <_Z8powerOffPcS_b+0x48>
		lcd_putsf(0,0,(unsigned char *)str1);
     9ac:	ae 01       	movw	r20, r28
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	be db       	rcall	.-2180   	; 0x130 <_Z9lcd_putsfhhPh>
		lcd_putsf(0,1,(unsigned char *)str2);
     9b4:	a8 01       	movw	r20, r16
     9b6:	61 e0       	ldi	r22, 0x01	; 1
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	ba db       	rcall	.-2188   	; 0x130 <_Z9lcd_putsfhhPh>
     9bc:	18 c0       	rjmp	.+48     	; 0x9ee <_Z8powerOffPcS_b+0x92>
//		_delay_ms(1000);
	}
	else{
		sprintf(str1,"                    ");
     9be:	85 e1       	ldi	r24, 0x15	; 21
     9c0:	ef e4       	ldi	r30, 0x4F	; 79
     9c2:	f4 e0       	ldi	r31, 0x04	; 4
     9c4:	de 01       	movw	r26, r28
     9c6:	01 90       	ld	r0, Z+
     9c8:	0d 92       	st	X+, r0
     9ca:	8a 95       	dec	r24
		lcd_putsf(0,0,(unsigned char *)str1);
     9cc:	e1 f7       	brne	.-8      	; 0x9c6 <_Z8powerOffPcS_b+0x6a>
     9ce:	ae 01       	movw	r20, r28
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	ad db       	rcall	.-2214   	; 0x130 <_Z9lcd_putsfhhPh>
		sprintf(str2,"                    ");
     9d6:	85 e1       	ldi	r24, 0x15	; 21
     9d8:	ef e4       	ldi	r30, 0x4F	; 79
     9da:	f4 e0       	ldi	r31, 0x04	; 4
     9dc:	d8 01       	movw	r26, r16
     9de:	01 90       	ld	r0, Z+
     9e0:	0d 92       	st	X+, r0
     9e2:	8a 95       	dec	r24
		lcd_putsf(0,1,(unsigned char *)str2);	
     9e4:	e1 f7       	brne	.-8      	; 0x9de <_Z8powerOffPcS_b+0x82>
     9e6:	a8 01       	movw	r20, r16
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	a1 db       	rcall	.-2238   	; 0x130 <_Z9lcd_putsfhhPh>
	}
}
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	08 95       	ret

000009f8 <_Z14exam_listeningiPiS_>:

void exam_listening(int array_cnt, int* ex_time, int* ex_song){
     9f8:	2f 92       	push	r2
     9fa:	3f 92       	push	r3
     9fc:	4f 92       	push	r4
     9fe:	5f 92       	push	r5
     a00:	6f 92       	push	r6
     a02:	7f 92       	push	r7
     a04:	8f 92       	push	r8
     a06:	9f 92       	push	r9
     a08:	af 92       	push	r10
     a0a:	bf 92       	push	r11
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
	for(int i=0;i<=array_cnt;i++){
     a1c:	99 23       	and	r25, r25
     a1e:	0c f4       	brge	.+2      	; 0xa22 <_Z14exam_listeningiPiS_+0x2a>
     a20:	66 c0       	rjmp	.+204    	; 0xaee <_Z14exam_listeningiPiS_+0xf6>
     a22:	1c 01       	movw	r2, r24
     a24:	e4 2e       	mov	r14, r20
     a26:	f5 2e       	mov	r15, r21
     a28:	06 2f       	mov	r16, r22
     a2a:	17 2f       	mov	r17, r23
     a2c:	c0 e0       	ldi	r28, 0x00	; 0
     a2e:	d0 e0       	ldi	r29, 0x00	; 0
     a30:	0f 2e       	mov	r0, r31
     a32:	f0 e9       	ldi	r31, 0x90	; 144
     a34:	cf 2e       	mov	r12, r31
     a36:	dd 24       	eor	r13, r13
     a38:	d3 94       	inc	r13
     a3a:	f0 2d       	mov	r31, r0
		MakeSound(ex_song[i]);
     a3c:	f7 01       	movw	r30, r14
     a3e:	21 91       	ld	r18, Z+
     a40:	31 91       	ld	r19, Z+
     a42:	7f 01       	movw	r14, r30
	}
	return 0;
}

void MakeSound(int freq){
	if(freq == 0) OCR1A = 0;
     a44:	21 15       	cp	r18, r1
     a46:	31 05       	cpc	r19, r1
     a48:	19 f4       	brne	.+6      	; 0xa50 <_Z14exam_listeningiPiS_+0x58>
     a4a:	1b bc       	out	0x2b, r1	; 43
     a4c:	1a bc       	out	0x2a, r1	; 42
     a4e:	0b c0       	rjmp	.+22     	; 0xa66 <_Z14exam_listeningiPiS_+0x6e>
	else OCR1A = 8000000 / freq; // 주파수 = 16000000 / (2 * 1(분주비) * OCR1A), OCR1A = 16000000 / (2 * 1) / 주파수
     a50:	03 2e       	mov	r0, r19
     a52:	00 0c       	add	r0, r0
     a54:	44 0b       	sbc	r20, r20
     a56:	55 0b       	sbc	r21, r21
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	72 e1       	ldi	r23, 0x12	; 18
     a5c:	8a e7       	ldi	r24, 0x7A	; 122
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	1d d4       	rcall	.+2106   	; 0x129c <__divmodsi4>
     a62:	3b bd       	out	0x2b, r19	; 43
     a64:	2a bd       	out	0x2a, r18	; 42
}

void exam_listening(int array_cnt, int* ex_time, int* ex_song){
	for(int i=0;i<=array_cnt;i++){
		MakeSound(ex_song[i]);
		PORTA = 0b11111101;
     a66:	fd ef       	ldi	r31, 0xFD	; 253
     a68:	fb bb       	out	0x1b, r31	; 27
		_delay_ms(ex_time[i]);
     a6a:	f8 01       	movw	r30, r16
     a6c:	61 91       	ld	r22, Z+
     a6e:	71 91       	ld	r23, Z+
     a70:	8f 01       	movw	r16, r30
     a72:	07 2e       	mov	r0, r23
     a74:	00 0c       	add	r0, r0
     a76:	88 0b       	sbc	r24, r24
     a78:	99 0b       	sbc	r25, r25
     a7a:	f9 d2       	rcall	.+1522   	; 0x106e <__floatsisf>
     a7c:	2b 01       	movw	r4, r22
     a7e:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	4a e7       	ldi	r20, 0x7A	; 122
     a86:	55 e4       	ldi	r21, 0x45	; 69
     a88:	7e d3       	rcall	.+1788   	; 0x1186 <__mulsf3>
     a8a:	4b 01       	movw	r8, r22
     a8c:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e8       	ldi	r20, 0x80	; 128
     a94:	5f e3       	ldi	r21, 0x3F	; 63
     a96:	b9 d2       	rcall	.+1394   	; 0x100a <__cmpsf2>
     a98:	88 23       	and	r24, r24
     a9a:	fc f0       	brlt	.+62     	; 0xada <_Z14exam_listeningiPiS_+0xe2>
		__ticks = 1;
	else if (__tmp > 65535)
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	3f ef       	ldi	r19, 0xFF	; 255
     aa0:	4f e7       	ldi	r20, 0x7F	; 127
     aa2:	57 e4       	ldi	r21, 0x47	; 71
     aa4:	c5 01       	movw	r24, r10
     aa6:	b4 01       	movw	r22, r8
     aa8:	6a d3       	rcall	.+1748   	; 0x117e <__gesf2>
     aaa:	18 16       	cp	r1, r24
     aac:	94 f4       	brge	.+36     	; 0xad2 <_Z14exam_listeningiPiS_+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	40 e2       	ldi	r20, 0x20	; 32
     ab4:	51 e4       	ldi	r21, 0x41	; 65
     ab6:	c3 01       	movw	r24, r6
     ab8:	b2 01       	movw	r22, r4
     aba:	65 d3       	rcall	.+1738   	; 0x1186 <__mulsf3>
     abc:	aa d2       	rcall	.+1364   	; 0x1012 <__fixunssfsi>
		while(__ticks)
     abe:	61 15       	cp	r22, r1
     ac0:	71 05       	cpc	r23, r1
     ac2:	81 f0       	breq	.+32     	; 0xae4 <_Z14exam_listeningiPiS_+0xec>
     ac4:	c6 01       	movw	r24, r12
     ac6:	01 97       	sbiw	r24, 0x01	; 1
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac8:	f1 f7       	brne	.-4      	; 0xac6 <_Z14exam_listeningiPiS_+0xce>
     aca:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     acc:	71 09       	sbc	r23, r1
     ace:	d1 f7       	brne	.-12     	; 0xac4 <_Z14exam_listeningiPiS_+0xcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ad0:	09 c0       	rjmp	.+18     	; 0xae4 <_Z14exam_listeningiPiS_+0xec>
     ad2:	c5 01       	movw	r24, r10
     ad4:	b4 01       	movw	r22, r8
     ad6:	9d d2       	rcall	.+1338   	; 0x1012 <__fixunssfsi>
     ad8:	02 c0       	rjmp	.+4      	; 0xade <_Z14exam_listeningiPiS_+0xe6>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     ada:	61 e0       	ldi	r22, 0x01	; 1
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	cb 01       	movw	r24, r22
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	f1 f7       	brne	.-4      	; 0xae0 <_Z14exam_listeningiPiS_+0xe8>
		lcd_putsf(0,1,(unsigned char *)str2);	
	}
}

void exam_listening(int array_cnt, int* ex_time, int* ex_song){
	for(int i=0;i<=array_cnt;i++){
     ae4:	21 96       	adiw	r28, 0x01	; 1
     ae6:	2c 16       	cp	r2, r28
     ae8:	3d 06       	cpc	r3, r29
     aea:	0c f0       	brlt	.+2      	; 0xaee <_Z14exam_listeningiPiS_+0xf6>
     aec:	a7 cf       	rjmp	.-178    	; 0xa3c <_Z14exam_listeningiPiS_+0x44>
		MakeSound(ex_song[i]);
		PORTA = 0b11111101;
		_delay_ms(ex_time[i]);
	}
	OCR1A = 0;
     aee:	1b bc       	out	0x2b, r1	; 43
     af0:	1a bc       	out	0x2a, r1	; 42
	PORTA = 0xff;
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	8b bb       	out	0x1b, r24	; 27
}
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	df 90       	pop	r13
     b04:	cf 90       	pop	r12
     b06:	bf 90       	pop	r11
     b08:	af 90       	pop	r10
     b0a:	9f 90       	pop	r9
     b0c:	8f 90       	pop	r8
     b0e:	7f 90       	pop	r7
     b10:	6f 90       	pop	r6
     b12:	5f 90       	pop	r5
     b14:	4f 90       	pop	r4
     b16:	3f 90       	pop	r3
     b18:	2f 90       	pop	r2
     b1a:	08 95       	ret

00000b1c <__vector_16>:
unsigned int msec = 0, rec_time = 0;
bool record_start = false;
int menu_flag = 0, example_menu_flag = 0, array_cnt = 0;
int record_time[100] = {0, }, record_btn[100] = {0, };

ISR(TIMER0_OVF_vect){  // interrupt service routine 분주한 속도 * 250 = 0.001
     b1c:	1f 92       	push	r1
     b1e:	0f 92       	push	r0
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	0f 92       	push	r0
     b24:	11 24       	eor	r1, r1
     b26:	2f 93       	push	r18
     b28:	3f 93       	push	r19
     b2a:	8f 93       	push	r24
     b2c:	9f 93       	push	r25
	msec++;
     b2e:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <msec>
     b32:	90 91 2c 07 	lds	r25, 0x072C	; 0x80072c <msec+0x1>
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	90 93 2c 07 	sts	0x072C, r25	; 0x80072c <msec+0x1>
     b3c:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <msec>
	
	if(record_start) rec_time++;
     b40:	20 91 28 07 	lds	r18, 0x0728	; 0x800728 <record_start>
     b44:	22 23       	and	r18, r18
     b46:	51 f0       	breq	.+20     	; 0xb5c <__vector_16+0x40>
     b48:	20 91 29 07 	lds	r18, 0x0729	; 0x800729 <rec_time>
     b4c:	30 91 2a 07 	lds	r19, 0x072A	; 0x80072a <rec_time+0x1>
     b50:	2f 5f       	subi	r18, 0xFF	; 255
     b52:	3f 4f       	sbci	r19, 0xFF	; 255
     b54:	30 93 2a 07 	sts	0x072A, r19	; 0x80072a <rec_time+0x1>
     b58:	20 93 29 07 	sts	0x0729, r18	; 0x800729 <rec_time>
	if(menu_flag >= 4) menu_flag = 0;
     b5c:	20 91 26 07 	lds	r18, 0x0726	; 0x800726 <menu_flag>
     b60:	30 91 27 07 	lds	r19, 0x0727	; 0x800727 <menu_flag+0x1>
     b64:	24 30       	cpi	r18, 0x04	; 4
     b66:	31 05       	cpc	r19, r1
     b68:	24 f0       	brlt	.+8      	; 0xb72 <__vector_16+0x56>
     b6a:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <menu_flag+0x1>
     b6e:	10 92 26 07 	sts	0x0726, r1	; 0x800726 <menu_flag>
	if(example_menu_flag >= 4) example_menu_flag = 0;
     b72:	20 91 24 07 	lds	r18, 0x0724	; 0x800724 <example_menu_flag>
     b76:	30 91 25 07 	lds	r19, 0x0725	; 0x800725 <example_menu_flag+0x1>
     b7a:	24 30       	cpi	r18, 0x04	; 4
     b7c:	31 05       	cpc	r19, r1
     b7e:	24 f0       	brlt	.+8      	; 0xb88 <__vector_16+0x6c>
     b80:	10 92 25 07 	sts	0x0725, r1	; 0x800725 <example_menu_flag+0x1>
     b84:	10 92 24 07 	sts	0x0724, r1	; 0x800724 <example_menu_flag>
	
	if(msec > 1000){  // 2초로 바꿔라
     b88:	89 3e       	cpi	r24, 0xE9	; 233
     b8a:	93 40       	sbci	r25, 0x03	; 3
     b8c:	b0 f0       	brcs	.+44     	; 0xbba <__vector_16+0x9e>
		menu_flag++;
     b8e:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <menu_flag>
     b92:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <menu_flag+0x1>
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <menu_flag+0x1>
     b9c:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <menu_flag>
		example_menu_flag++;
     ba0:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <example_menu_flag>
     ba4:	90 91 25 07 	lds	r25, 0x0725	; 0x800725 <example_menu_flag+0x1>
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	90 93 25 07 	sts	0x0725, r25	; 0x800725 <example_menu_flag+0x1>
     bae:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <example_menu_flag>
		msec = 0;
     bb2:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <msec+0x1>
     bb6:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <msec>
	}
}
     bba:	9f 91       	pop	r25
     bbc:	8f 91       	pop	r24
     bbe:	3f 91       	pop	r19
     bc0:	2f 91       	pop	r18
     bc2:	0f 90       	pop	r0
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	0f 90       	pop	r0
     bc8:	1f 90       	pop	r1
     bca:	18 95       	reti

00000bcc <main>:

int main(){
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	a9 97       	sbiw	r28, 0x29	; 41
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	f8 94       	cli
     bda:	de bf       	out	0x3e, r29	; 62
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	cd bf       	out	0x3d, r28	; 61
	lcd_init();
     be0:	ba da       	rcall	.-2700   	; 0x156 <_Z8lcd_initv>
	lcd_clear();
     be2:	e8 da       	rcall	.-2608   	; 0x1b4 <_Z9lcd_clearv>
	port_init();
     be4:	19 db       	rcall	.-2510   	; 0x218 <_Z9port_initv>
     be6:	84 e1       	ldi	r24, 0x14	; 20
	
	unsigned int key, record_key, power_toggle = 0;
	bool powerOn_toggle = true, powerOff_toggle = true, menu_timer_toggle = true;
	bool record_btn_toggle = true, example_btn_toggle = true, return_btn_toggle = true;
	char str1[20] = "                   ";
     be8:	e0 e5       	ldi	r30, 0x50	; 80
     bea:	f4 e0       	ldi	r31, 0x04	; 4
     bec:	de 01       	movw	r26, r28
     bee:	11 96       	adiw	r26, 0x01	; 1
     bf0:	01 90       	ld	r0, Z+
     bf2:	0d 92       	st	X+, r0
     bf4:	8a 95       	dec	r24
     bf6:	e1 f7       	brne	.-8      	; 0xbf0 <main+0x24>
     bf8:	84 e1       	ldi	r24, 0x14	; 20
	char str2[20] = "                   ";
     bfa:	e0 e5       	ldi	r30, 0x50	; 80
     bfc:	f4 e0       	ldi	r31, 0x04	; 4
     bfe:	de 01       	movw	r26, r28
     c00:	55 96       	adiw	r26, 0x15	; 21
     c02:	01 90       	ld	r0, Z+
     c04:	0d 92       	st	X+, r0
     c06:	8a 95       	dec	r24
     c08:	e1 f7       	brne	.-8      	; 0xc02 <main+0x36>
     c0a:	86 e0       	ldi	r24, 0x06	; 6
	int state = PLAY_MODE;
	int r_flag = 0;
	
	//timer init
	TCNT0 = 6;  // TCNT0가 256이 될때 overflow -> 0  1/16mHz = 0.0000000625, 0.0000000625 * 64 = 0.000004 분주한 속도
     c0c:	82 bf       	out	0x32, r24	; 50
     c0e:	81 e0       	ldi	r24, 0x01	; 1
	TIMSK = 0x01;  // 0b00000001, timer 0 enable
     c10:	87 bf       	out	0x37, r24	; 55
     c12:	84 e0       	ldi	r24, 0x04	; 4
	TCCR0 = 0b00000100;  // 0b00000100, 분주비 = 64
     c14:	83 bf       	out	0x33, r24	; 51
     c16:	78 94       	sei
	sei();  // 숫자를 카운트
     c18:	a1 2c       	mov	r10, r1
	bool powerOn_toggle = true, powerOff_toggle = true, menu_timer_toggle = true;
	bool record_btn_toggle = true, example_btn_toggle = true, return_btn_toggle = true;
	char str1[20] = "                   ";
	char str2[20] = "                   ";
	int state = PLAY_MODE;
	int r_flag = 0;
     c1a:	b1 2c       	mov	r11, r1
     c1c:	c1 2c       	mov	r12, r1
	unsigned int key, record_key, power_toggle = 0;
	bool powerOn_toggle = true, powerOff_toggle = true, menu_timer_toggle = true;
	bool record_btn_toggle = true, example_btn_toggle = true, return_btn_toggle = true;
	char str1[20] = "                   ";
	char str2[20] = "                   ";
	int state = PLAY_MODE;
     c1e:	d1 2c       	mov	r13, r1
     c20:	33 24       	eor	r3, r3
	lcd_clear();
	port_init();
	
	unsigned int key, record_key, power_toggle = 0;
	bool powerOn_toggle = true, powerOff_toggle = true, menu_timer_toggle = true;
	bool record_btn_toggle = true, example_btn_toggle = true, return_btn_toggle = true;
     c22:	33 94       	inc	r3
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	89 a7       	std	Y+41, r24	; 0x29
     c28:	22 24       	eor	r2, r2
	lcd_init();
	lcd_clear();
	port_init();
	
	unsigned int key, record_key, power_toggle = 0;
	bool powerOn_toggle = true, powerOff_toggle = true, menu_timer_toggle = true;
     c2a:	23 94       	inc	r2
     c2c:	55 24       	eor	r5, r5
     c2e:	53 94       	inc	r5
     c30:	66 24       	eor	r6, r6
     c32:	63 94       	inc	r6
     c34:	e1 2c       	mov	r14, r1
int main(){
	lcd_init();
	lcd_clear();
	port_init();
	
	unsigned int key, record_key, power_toggle = 0;
     c36:	f1 2c       	mov	r15, r1
     c38:	71 2c       	mov	r7, r1
			}
			
		}
		else{
			powerOff(str1,str2,powerOff_toggle);
			powerOff_toggle = false;
     c3a:	44 24       	eor	r4, r4
			powerOn_toggle = true;
     c3c:	43 94       	inc	r4
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <main+0x78>
		if(key == sw9) power_toggle = ~power_toggle;
		
		if(power_toggle){
			powerOn(str1,str2,powerOn_toggle);
			powerOn_toggle = false;
			powerOff_toggle = true;
     c40:	54 2c       	mov	r5, r4
		
		if(key == sw9) power_toggle = ~power_toggle;
		
		if(power_toggle){
			powerOn(str1,str2,powerOn_toggle);
			powerOn_toggle = false;
     c42:	67 2c       	mov	r6, r7
	TIMSK = 0x01;  // 0b00000001, timer 0 enable
	TCCR0 = 0b00000100;  // 0b00000100, 분주비 = 64
	sei();  // 숫자를 카운트
	
	while (1){
		key = my_getkey();
     c44:	be da       	rcall	.-2692   	; 0x1c2 <_Z9my_getkeyv>
     c46:	8c 01       	movw	r16, r24
     c48:	8b 34       	cpi	r24, 0x4B	; 75
		
		if(key == sw9) power_toggle = ~power_toggle;
     c4a:	91 05       	cpc	r25, r1
     c4c:	11 f4       	brne	.+4      	; 0xc52 <main+0x86>
     c4e:	e0 94       	com	r14
     c50:	f0 94       	com	r15
     c52:	e1 14       	cp	r14, r1
		
		if(power_toggle){
     c54:	f1 04       	cpc	r15, r1
     c56:	09 f4       	brne	.+2      	; 0xc5a <main+0x8e>
     c58:	ce c1       	rjmp	.+924    	; 0xff6 <main+0x42a>
     c5a:	46 2d       	mov	r20, r6
			powerOn(str1,str2,powerOn_toggle);
     c5c:	be 01       	movw	r22, r28
     c5e:	6b 5e       	subi	r22, 0xEB	; 235
     c60:	7f 4f       	sbci	r23, 0xFF	; 255
     c62:	ce 01       	movw	r24, r28
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	4e de       	rcall	.-868    	; 0x904 <_Z7powerOnPcS_b>
     c68:	c1 14       	cp	r12, r1
			powerOn_toggle = false;
			powerOff_toggle = true;
			
			if(state == PLAY_MODE){
     c6a:	d1 04       	cpc	r13, r1
     c6c:	f1 f4       	brne	.+60     	; 0xcaa <main+0xde>
     c6e:	0b 32       	cpi	r16, 0x2B	; 43
				if(key == sw8){
     c70:	11 05       	cpc	r17, r1
     c72:	31 f4       	brne	.+12     	; 0xc80 <main+0xb4>
     c74:	33 20       	and	r3, r3
					if(return_btn_toggle){
     c76:	29 f0       	breq	.+10     	; 0xc82 <main+0xb6>
     c78:	cc 24       	eor	r12, r12
						state = MENU_MODE;
     c7a:	c3 94       	inc	r12
     c7c:	d1 2c       	mov	r13, r1
     c7e:	01 c0       	rjmp	.+2      	; 0xc82 <main+0xb6>
     c80:	34 2c       	mov	r3, r4
					}
				}
				else return_btn_toggle = true;
     c82:	87 e1       	ldi	r24, 0x17	; 23
				sprintf(str1,"  PIANO START         ");
     c84:	e2 e9       	ldi	r30, 0x92	; 146
     c86:	f4 e0       	ldi	r31, 0x04	; 4
     c88:	de 01       	movw	r26, r28
     c8a:	11 96       	adiw	r26, 0x01	; 1
     c8c:	01 90       	ld	r0, Z+
     c8e:	0d 92       	st	X+, r0
     c90:	8a 95       	dec	r24
     c92:	e1 f7       	brne	.-8      	; 0xc8c <main+0xc0>
     c94:	ae 01       	movw	r20, r28
				lcd_putsf(0,0,(unsigned char *)str1);
     c96:	4f 5f       	subi	r20, 0xFF	; 255
     c98:	5f 4f       	sbci	r21, 0xFF	; 255
     c9a:	67 2d       	mov	r22, r7
     c9c:	87 2d       	mov	r24, r7
     c9e:	48 da       	rcall	.-2928   	; 0x130 <_Z9lcd_putsfhhPh>
				play_piano(key);
     ca0:	c8 01       	movw	r24, r16
     ca2:	48 db       	rcall	.-2416   	; 0x334 <_Z10play_pianoj>
     ca4:	54 2c       	mov	r5, r4
		if(key == sw9) power_toggle = ~power_toggle;
		
		if(power_toggle){
			powerOn(str1,str2,powerOn_toggle);
			powerOn_toggle = false;
			powerOff_toggle = true;
     ca6:	67 2c       	mov	r6, r7
		
		if(key == sw9) power_toggle = ~power_toggle;
		
		if(power_toggle){
			powerOn(str1,str2,powerOn_toggle);
			powerOn_toggle = false;
     ca8:	cd cf       	rjmp	.-102    	; 0xc44 <main+0x78>
     caa:	81 e0       	ldi	r24, 0x01	; 1
				sprintf(str1,"  PIANO START         ");
				lcd_putsf(0,0,(unsigned char *)str1);
				play_piano(key);
			}
			
			else if(state == MENU_MODE){
     cac:	c8 16       	cp	r12, r24
     cae:	d1 04       	cpc	r13, r1
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <main+0xe8>
     cb2:	86 c0       	rjmp	.+268    	; 0xdc0 <main+0x1f4>
     cb4:	22 20       	and	r2, r2
				if(menu_timer_toggle){
     cb6:	41 f0       	breq	.+16     	; 0xcc8 <main+0xfc>
     cb8:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <msec+0x1>
					msec = 0;
     cbc:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <msec>
     cc0:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <menu_flag+0x1>
					menu_flag = 0;
     cc4:	10 92 26 07 	sts	0x0726, r1	; 0x800726 <menu_flag>
     cc8:	85 e1       	ldi	r24, 0x15	; 21
					menu_timer_toggle = false;
				}

				sprintf(str1,"    M E N U         ");
     cca:	e9 ea       	ldi	r30, 0xA9	; 169
     ccc:	f4 e0       	ldi	r31, 0x04	; 4
     cce:	de 01       	movw	r26, r28
     cd0:	11 96       	adiw	r26, 0x01	; 1
     cd2:	01 90       	ld	r0, Z+
     cd4:	0d 92       	st	X+, r0
     cd6:	8a 95       	dec	r24
     cd8:	e1 f7       	brne	.-8      	; 0xcd2 <main+0x106>
				lcd_putsf(0,0,(unsigned char *)str1);
     cda:	ae 01       	movw	r20, r28
     cdc:	4f 5f       	subi	r20, 0xFF	; 255
     cde:	5f 4f       	sbci	r21, 0xFF	; 255
     ce0:	67 2d       	mov	r22, r7
     ce2:	87 2d       	mov	r24, r7
     ce4:	25 da       	rcall	.-2998   	; 0x130 <_Z9lcd_putsfhhPh>
     ce6:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <menu_flag>
				if(menu_flag == 0){
     cea:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <menu_flag+0x1>
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	b9 f4       	brne	.+46     	; 0xd20 <main+0x154>
     cf2:	85 e1       	ldi	r24, 0x15	; 21
					sprintf(str2,"1. Recording        ");
     cf4:	ee eb       	ldi	r30, 0xBE	; 190
     cf6:	f4 e0       	ldi	r31, 0x04	; 4
     cf8:	de 01       	movw	r26, r28
     cfa:	55 96       	adiw	r26, 0x15	; 21
     cfc:	01 90       	ld	r0, Z+
     cfe:	0d 92       	st	X+, r0
     d00:	8a 95       	dec	r24
     d02:	e1 f7       	brne	.-8      	; 0xcfc <main+0x130>
					if(key == sw8){
     d04:	0b 32       	cpi	r16, 0x2B	; 43
     d06:	11 05       	cpc	r17, r1
     d08:	09 f0       	breq	.+2      	; 0xd0c <main+0x140>
     d0a:	48 c0       	rjmp	.+144    	; 0xd9c <main+0x1d0>
						state = RECORD_MODE;
						record_btn_toggle = false;
						record_start = true;
     d0c:	40 92 28 07 	sts	0x0728, r4	; 0x800728 <record_start>
						lcd_clear();
     d10:	51 da       	rcall	.-2910   	; 0x1b4 <_Z9lcd_clearv>
     d12:	68 94       	set
				sprintf(str1,"    M E N U         ");
				lcd_putsf(0,0,(unsigned char *)str1);
				if(menu_flag == 0){
					sprintf(str2,"1. Recording        ");
					if(key == sw8){
						state = RECORD_MODE;
     d14:	cc 24       	eor	r12, r12
     d16:	c1 f8       	bld	r12, 1
     d18:	d1 2c       	mov	r13, r1
     d1a:	79 a6       	std	Y+41, r7	; 0x29
						record_btn_toggle = false;
     d1c:	27 2c       	mov	r2, r7
     d1e:	47 c0       	rjmp	.+142    	; 0xdae <main+0x1e2>
     d20:	81 30       	cpi	r24, 0x01	; 1
						record_start = true;
						lcd_clear();
					}
				}
				else if(menu_flag == 1){
     d22:	91 05       	cpc	r25, r1
     d24:	99 f4       	brne	.+38     	; 0xd4c <main+0x180>
     d26:	85 e1       	ldi	r24, 0x15	; 21
					sprintf(str2,"2. Listening        ");
     d28:	e3 ed       	ldi	r30, 0xD3	; 211
     d2a:	f4 e0       	ldi	r31, 0x04	; 4
     d2c:	de 01       	movw	r26, r28
     d2e:	55 96       	adiw	r26, 0x15	; 21
     d30:	01 90       	ld	r0, Z+
     d32:	0d 92       	st	X+, r0
     d34:	8a 95       	dec	r24
     d36:	e1 f7       	brne	.-8      	; 0xd30 <main+0x164>
     d38:	0b 32       	cpi	r16, 0x2B	; 43
					if(key == sw8){
     d3a:	11 05       	cpc	r17, r1
     d3c:	89 f5       	brne	.+98     	; 0xda0 <main+0x1d4>
     d3e:	0f 2e       	mov	r0, r31
						state = LISTEN_MODE;
     d40:	f3 e0       	ldi	r31, 0x03	; 3
     d42:	cf 2e       	mov	r12, r31
     d44:	f0 2d       	mov	r31, r0
     d46:	d1 2c       	mov	r13, r1
     d48:	27 2c       	mov	r2, r7
						lcd_clear();
					}
				}
				else if(menu_flag == 1){
					sprintf(str2,"2. Listening        ");
					if(key == sw8){
     d4a:	31 c0       	rjmp	.+98     	; 0xdae <main+0x1e2>
     d4c:	82 30       	cpi	r24, 0x02	; 2
						state = LISTEN_MODE;
					}
				}
				else if(menu_flag == 2){
     d4e:	91 05       	cpc	r25, r1
     d50:	91 f4       	brne	.+36     	; 0xd76 <main+0x1aa>
     d52:	85 e1       	ldi	r24, 0x15	; 21
					sprintf(str2,"3. Example          ");
     d54:	e8 ee       	ldi	r30, 0xE8	; 232
     d56:	f4 e0       	ldi	r31, 0x04	; 4
     d58:	de 01       	movw	r26, r28
     d5a:	55 96       	adiw	r26, 0x15	; 21
     d5c:	01 90       	ld	r0, Z+
     d5e:	0d 92       	st	X+, r0
     d60:	8a 95       	dec	r24
     d62:	e1 f7       	brne	.-8      	; 0xd5c <main+0x190>
     d64:	0b 32       	cpi	r16, 0x2B	; 43
					if(key == sw8){
     d66:	11 05       	cpc	r17, r1
     d68:	e9 f4       	brne	.+58     	; 0xda4 <main+0x1d8>
     d6a:	68 94       	set
						example_btn_toggle = false;
						menu_timer_toggle = true;
						state = EXAMPLE_MODE;
     d6c:	cc 24       	eor	r12, r12
     d6e:	c2 f8       	bld	r12, 2
     d70:	d1 2c       	mov	r13, r1
     d72:	24 2c       	mov	r2, r4
				}
				else if(menu_flag == 2){
					sprintf(str2,"3. Example          ");
					if(key == sw8){
						example_btn_toggle = false;
						menu_timer_toggle = true;
     d74:	1c c0       	rjmp	.+56     	; 0xdae <main+0x1e2>
     d76:	03 97       	sbiw	r24, 0x03	; 3
						state = EXAMPLE_MODE;
					}
				}
				else if(menu_flag == 3){
     d78:	b9 f4       	brne	.+46     	; 0xda8 <main+0x1dc>
     d7a:	85 e1       	ldi	r24, 0x15	; 21
					sprintf(str2,"4. Return           ");
     d7c:	ed ef       	ldi	r30, 0xFD	; 253
     d7e:	f4 e0       	ldi	r31, 0x04	; 4
     d80:	de 01       	movw	r26, r28
     d82:	55 96       	adiw	r26, 0x15	; 21
     d84:	01 90       	ld	r0, Z+
     d86:	0d 92       	st	X+, r0
     d88:	8a 95       	dec	r24
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <main+0x1b8>
     d8c:	0b 32       	cpi	r16, 0x2B	; 43
					if(key == sw8){
     d8e:	11 05       	cpc	r17, r1
     d90:	69 f4       	brne	.+26     	; 0xdac <main+0x1e0>
     d92:	c1 2c       	mov	r12, r1
						state = PLAY_MODE;
     d94:	d1 2c       	mov	r13, r1
     d96:	37 2c       	mov	r3, r7
						return_btn_toggle = false;
     d98:	27 2c       	mov	r2, r7
						state = EXAMPLE_MODE;
					}
				}
				else if(menu_flag == 3){
					sprintf(str2,"4. Return           ");
					if(key == sw8){
     d9a:	09 c0       	rjmp	.+18     	; 0xdae <main+0x1e2>
     d9c:	27 2c       	mov	r2, r7
     d9e:	07 c0       	rjmp	.+14     	; 0xdae <main+0x1e2>
     da0:	27 2c       	mov	r2, r7
     da2:	05 c0       	rjmp	.+10     	; 0xdae <main+0x1e2>
     da4:	27 2c       	mov	r2, r7
     da6:	03 c0       	rjmp	.+6      	; 0xdae <main+0x1e2>
     da8:	27 2c       	mov	r2, r7
     daa:	01 c0       	rjmp	.+2      	; 0xdae <main+0x1e2>
     dac:	27 2c       	mov	r2, r7
						state = PLAY_MODE;
						return_btn_toggle = false;
					}
				}					
				lcd_putsf(0,1,(unsigned char *)str2);				
     dae:	ae 01       	movw	r20, r28
     db0:	4b 5e       	subi	r20, 0xEB	; 235
     db2:	5f 4f       	sbci	r21, 0xFF	; 255
     db4:	64 2d       	mov	r22, r4
     db6:	87 2d       	mov	r24, r7
     db8:	bb d9       	rcall	.-3210   	; 0x130 <_Z9lcd_putsfhhPh>
     dba:	54 2c       	mov	r5, r4
		if(key == sw9) power_toggle = ~power_toggle;
		
		if(power_toggle){
			powerOn(str1,str2,powerOn_toggle);
			powerOn_toggle = false;
			powerOff_toggle = true;
     dbc:	67 2c       	mov	r6, r7
		
		if(key == sw9) power_toggle = ~power_toggle;
		
		if(power_toggle){
			powerOn(str1,str2,powerOn_toggle);
			powerOn_toggle = false;
     dbe:	42 cf       	rjmp	.-380    	; 0xc44 <main+0x78>
     dc0:	82 e0       	ldi	r24, 0x02	; 2
					}
				}					
				lcd_putsf(0,1,(unsigned char *)str2);				
			}
			
			else if(state == RECORD_MODE){
     dc2:	c8 16       	cp	r12, r24
     dc4:	d1 04       	cpc	r13, r1
     dc6:	09 f0       	breq	.+2      	; 0xdca <main+0x1fe>
     dc8:	75 c0       	rjmp	.+234    	; 0xeb4 <main+0x2e8>
     dca:	84 e1       	ldi	r24, 0x14	; 20
				sprintf(str1,"  Recording..      ");
     dcc:	ee e7       	ldi	r30, 0x7E	; 126
     dce:	f5 e0       	ldi	r31, 0x05	; 5
     dd0:	de 01       	movw	r26, r28
     dd2:	11 96       	adiw	r26, 0x01	; 1
     dd4:	01 90       	ld	r0, Z+
     dd6:	0d 92       	st	X+, r0
     dd8:	8a 95       	dec	r24
     dda:	e1 f7       	brne	.-8      	; 0xdd4 <main+0x208>
     ddc:	0b 32       	cpi	r16, 0x2B	; 43
				
				if(key==sw8){
     dde:	11 05       	cpc	r17, r1
     de0:	51 f4       	brne	.+20     	; 0xdf6 <main+0x22a>
     de2:	89 a5       	ldd	r24, Y+41	; 0x29
					if(record_btn_toggle){
     de4:	88 23       	and	r24, r24
     de6:	71 f0       	breq	.+28     	; 0xe04 <main+0x238>
     de8:	70 92 28 07 	sts	0x0728, r7	; 0x800728 <record_start>
						record_btn_toggle = true;
						record_start = false;
     dec:	cc 24       	eor	r12, r12
						menu_timer_toggle = true;
						state = MENU_MODE;
     dee:	c3 94       	inc	r12
     df0:	d1 2c       	mov	r13, r1
     df2:	24 2c       	mov	r2, r4
				
				if(key==sw8){
					if(record_btn_toggle){
						record_btn_toggle = true;
						record_start = false;
						menu_timer_toggle = true;
     df4:	07 c0       	rjmp	.+14     	; 0xe04 <main+0x238>
     df6:	0b 34       	cpi	r16, 0x4B	; 75
						state = MENU_MODE;
					}
				}
				else record_btn_toggle = true;

				if(key != sw9 && key != sw8) record_key = key;
     df8:	11 05       	cpc	r17, r1
     dfa:	11 f4       	brne	.+4      	; 0xe00 <main+0x234>
     dfc:	49 a6       	std	Y+41, r4	; 0x29
						record_start = false;
						menu_timer_toggle = true;
						state = MENU_MODE;
					}
				}
				else record_btn_toggle = true;
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <main+0x238>
     e00:	48 01       	movw	r8, r16

				if(key != sw9 && key != sw8) record_key = key;
     e02:	49 a6       	std	Y+41, r4	; 0x29
						record_start = false;
						menu_timer_toggle = true;
						state = MENU_MODE;
					}
				}
				else record_btn_toggle = true;
     e04:	81 14       	cp	r8, r1

				if(key != sw9 && key != sw8) record_key = key;
				if(record_key){
     e06:	91 04       	cpc	r9, r1
     e08:	31 f1       	breq	.+76     	; 0xe56 <main+0x28a>
     e0a:	a1 14       	cp	r10, r1
					if(r_flag  == 0){
     e0c:	b1 04       	cpc	r11, r1
     e0e:	09 f0       	breq	.+2      	; 0xe12 <main+0x246>
     e10:	46 c0       	rjmp	.+140    	; 0xe9e <main+0x2d2>
     e12:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <array_cnt>
						record_time[array_cnt] = rec_time;
     e16:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <array_cnt+0x1>
     e1a:	9c 01       	movw	r18, r24
     e1c:	22 0f       	add	r18, r18
     e1e:	33 1f       	adc	r19, r19
     e20:	f9 01       	movw	r30, r18
     e22:	e6 5a       	subi	r30, 0xA6	; 166
     e24:	f9 4f       	sbci	r31, 0xF9	; 249
     e26:	40 91 29 07 	lds	r20, 0x0729	; 0x800729 <rec_time>
     e2a:	50 91 2a 07 	lds	r21, 0x072A	; 0x80072a <rec_time+0x1>
     e2e:	51 83       	std	Z+1, r21	; 0x01
     e30:	40 83       	st	Z, r20
     e32:	f9 01       	movw	r30, r18
						record_btn[array_cnt] = key;
     e34:	ee 56       	subi	r30, 0x6E	; 110
     e36:	fa 4f       	sbci	r31, 0xFA	; 250
     e38:	11 83       	std	Z+1, r17	; 0x01
     e3a:	00 83       	st	Z, r16
     e3c:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <rec_time+0x1>
						rec_time = 0;
     e40:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <rec_time>
     e44:	01 96       	adiw	r24, 0x01	; 1
						array_cnt++;
     e46:	90 93 23 07 	sts	0x0723, r25	; 0x800723 <array_cnt+0x1>
     e4a:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <array_cnt>
     e4e:	aa 24       	eor	r10, r10
						r_flag = 1;
     e50:	a3 94       	inc	r10
     e52:	b1 2c       	mov	r11, r1
     e54:	24 c0       	rjmp	.+72     	; 0xe9e <main+0x2d2>
     e56:	81 e0       	ldi	r24, 0x01	; 1
					}
				}
				else{
					if(r_flag == 1){
     e58:	a8 16       	cp	r10, r24
     e5a:	b1 04       	cpc	r11, r1
     e5c:	01 f5       	brne	.+64     	; 0xe9e <main+0x2d2>
     e5e:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <array_cnt>
						record_time[array_cnt] = rec_time;
     e62:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <array_cnt+0x1>
     e66:	9c 01       	movw	r18, r24
     e68:	22 0f       	add	r18, r18
     e6a:	33 1f       	adc	r19, r19
     e6c:	f9 01       	movw	r30, r18
     e6e:	e6 5a       	subi	r30, 0xA6	; 166
     e70:	f9 4f       	sbci	r31, 0xF9	; 249
     e72:	40 91 29 07 	lds	r20, 0x0729	; 0x800729 <rec_time>
     e76:	50 91 2a 07 	lds	r21, 0x072A	; 0x80072a <rec_time+0x1>
     e7a:	51 83       	std	Z+1, r21	; 0x01
     e7c:	40 83       	st	Z, r20
     e7e:	f9 01       	movw	r30, r18
						record_btn[array_cnt] = key;
     e80:	ee 56       	subi	r30, 0x6E	; 110
     e82:	fa 4f       	sbci	r31, 0xFA	; 250
     e84:	11 83       	std	Z+1, r17	; 0x01
     e86:	00 83       	st	Z, r16
     e88:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <rec_time+0x1>
						rec_time = 0;
     e8c:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <rec_time>
						array_cnt++;
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	90 93 23 07 	sts	0x0723, r25	; 0x800723 <array_cnt+0x1>
     e96:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <array_cnt>
						r_flag = 0;
     e9a:	a1 2c       	mov	r10, r1
					}
				}
				play_piano(key);
     e9c:	b1 2c       	mov	r11, r1
     e9e:	c8 01       	movw	r24, r16
     ea0:	49 da       	rcall	.-2926   	; 0x334 <_Z10play_pianoj>
				lcd_putsf(0,0,(unsigned char *)str1);
     ea2:	ae 01       	movw	r20, r28
     ea4:	4f 5f       	subi	r20, 0xFF	; 255
     ea6:	5f 4f       	sbci	r21, 0xFF	; 255
     ea8:	67 2d       	mov	r22, r7
     eaa:	87 2d       	mov	r24, r7
     eac:	41 d9       	rcall	.-3454   	; 0x130 <_Z9lcd_putsfhhPh>
     eae:	54 2c       	mov	r5, r4
		if(key == sw9) power_toggle = ~power_toggle;
		
		if(power_toggle){
			powerOn(str1,str2,powerOn_toggle);
			powerOn_toggle = false;
			powerOff_toggle = true;
     eb0:	67 2c       	mov	r6, r7
		
		if(key == sw9) power_toggle = ~power_toggle;
		
		if(power_toggle){
			powerOn(str1,str2,powerOn_toggle);
			powerOn_toggle = false;
     eb2:	c8 ce       	rjmp	.-624    	; 0xc44 <main+0x78>
     eb4:	83 e0       	ldi	r24, 0x03	; 3
				}
				play_piano(key);
				lcd_putsf(0,0,(unsigned char *)str1);
			}
			
			else if(state == LISTEN_MODE){
     eb6:	c8 16       	cp	r12, r24
     eb8:	d1 04       	cpc	r13, r1
     eba:	f9 f4       	brne	.+62     	; 0xefa <main+0x32e>
     ebc:	86 e1       	ldi	r24, 0x16	; 22
				sprintf(str1,"  Listening..        ");
     ebe:	e2 e1       	ldi	r30, 0x12	; 18
     ec0:	f5 e0       	ldi	r31, 0x05	; 5
     ec2:	de 01       	movw	r26, r28
     ec4:	11 96       	adiw	r26, 0x01	; 1
     ec6:	01 90       	ld	r0, Z+
     ec8:	0d 92       	st	X+, r0
     eca:	8a 95       	dec	r24
     ecc:	e1 f7       	brne	.-8      	; 0xec6 <main+0x2fa>
				lcd_putsf(0,0,(unsigned char *)str1);
     ece:	ae 01       	movw	r20, r28
     ed0:	4f 5f       	subi	r20, 0xFF	; 255
     ed2:	5f 4f       	sbci	r21, 0xFF	; 255
     ed4:	67 2d       	mov	r22, r7
     ed6:	87 2d       	mov	r24, r7
     ed8:	2b d9       	rcall	.-3498   	; 0x130 <_Z9lcd_putsfhhPh>
				listen_record(array_cnt,record_time,record_btn);
     eda:	42 e9       	ldi	r20, 0x92	; 146
     edc:	55 e0       	ldi	r21, 0x05	; 5
     ede:	6a e5       	ldi	r22, 0x5A	; 90
     ee0:	76 e0       	ldi	r23, 0x06	; 6
     ee2:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <array_cnt>
     ee6:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <array_cnt+0x1>
     eea:	85 da       	rcall	.-2806   	; 0x3f6 <_Z13listen_recordiPiS_>
     eec:	cc 24       	eor	r12, r12
				menu_timer_toggle = true;
				state = MENU_MODE;
     eee:	c3 94       	inc	r12
     ef0:	d1 2c       	mov	r13, r1
     ef2:	24 2c       	mov	r2, r4
			
			else if(state == LISTEN_MODE){
				sprintf(str1,"  Listening..        ");
				lcd_putsf(0,0,(unsigned char *)str1);
				listen_record(array_cnt,record_time,record_btn);
				menu_timer_toggle = true;
     ef4:	54 2c       	mov	r5, r4
		if(key == sw9) power_toggle = ~power_toggle;
		
		if(power_toggle){
			powerOn(str1,str2,powerOn_toggle);
			powerOn_toggle = false;
			powerOff_toggle = true;
     ef6:	67 2c       	mov	r6, r7
		
		if(key == sw9) power_toggle = ~power_toggle;
		
		if(power_toggle){
			powerOn(str1,str2,powerOn_toggle);
			powerOn_toggle = false;
     ef8:	a5 ce       	rjmp	.-694    	; 0xc44 <main+0x78>
     efa:	84 e0       	ldi	r24, 0x04	; 4
				listen_record(array_cnt,record_time,record_btn);
				menu_timer_toggle = true;
				state = MENU_MODE;
			}
			
			else if(state == EXAMPLE_MODE){
     efc:	c8 16       	cp	r12, r24
     efe:	d1 04       	cpc	r13, r1
     f00:	09 f0       	breq	.+2      	; 0xf04 <main+0x338>
     f02:	9e ce       	rjmp	.-708    	; 0xc40 <main+0x74>
     f04:	87 e1       	ldi	r24, 0x17	; 23
				sprintf(str1,"  - Example -         ");
     f06:	e8 e2       	ldi	r30, 0x28	; 40
     f08:	f5 e0       	ldi	r31, 0x05	; 5
     f0a:	de 01       	movw	r26, r28
     f0c:	11 96       	adiw	r26, 0x01	; 1
     f0e:	01 90       	ld	r0, Z+
     f10:	0d 92       	st	X+, r0
     f12:	8a 95       	dec	r24
     f14:	e1 f7       	brne	.-8      	; 0xf0e <main+0x342>
				lcd_putsf(0,0,(unsigned char *)str1);
     f16:	ae 01       	movw	r20, r28
     f18:	4f 5f       	subi	r20, 0xFF	; 255
     f1a:	5f 4f       	sbci	r21, 0xFF	; 255
     f1c:	67 2d       	mov	r22, r7
     f1e:	87 2d       	mov	r24, r7
     f20:	07 d9       	rcall	.-3570   	; 0x130 <_Z9lcd_putsfhhPh>
     f22:	22 20       	and	r2, r2
				
				if(menu_timer_toggle){
     f24:	49 f0       	breq	.+18     	; 0xf38 <main+0x36c>
     f26:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <msec+0x1>
					msec = 0;
     f2a:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <msec>
     f2e:	10 92 25 07 	sts	0x0725, r1	; 0x800725 <example_menu_flag+0x1>
					example_menu_flag = 0;
     f32:	10 92 24 07 	sts	0x0724, r1	; 0x800724 <example_menu_flag>
     f36:	06 c0       	rjmp	.+12     	; 0xf44 <main+0x378>
     f38:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <example_menu_flag>
					menu_timer_toggle = false;
				}
				
				if(example_menu_flag == 0){
     f3c:	90 91 25 07 	lds	r25, 0x0725	; 0x800725 <example_menu_flag+0x1>
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	c1 f4       	brne	.+48     	; 0xf74 <main+0x3a8>
     f44:	85 e1       	ldi	r24, 0x15	; 21
					sprintf(str2,"1. Example 1        ");
     f46:	ef e3       	ldi	r30, 0x3F	; 63
     f48:	f5 e0       	ldi	r31, 0x05	; 5
     f4a:	de 01       	movw	r26, r28
     f4c:	55 96       	adiw	r26, 0x15	; 21
     f4e:	01 90       	ld	r0, Z+
     f50:	0d 92       	st	X+, r0
     f52:	8a 95       	dec	r24
     f54:	e1 f7       	brne	.-8      	; 0xf4e <main+0x382>
					if(key == sw8){
     f56:	0b 32       	cpi	r16, 0x2B	; 43
     f58:	11 05       	cpc	r17, r1
     f5a:	09 f0       	breq	.+2      	; 0xf5e <main+0x392>
     f5c:	42 c0       	rjmp	.+132    	; 0xfe2 <main+0x416>
						exam_listening(200,ex1_time,ex1_song);
     f5e:	40 e9       	ldi	r20, 0x90	; 144
     f60:	52 e0       	ldi	r21, 0x02	; 2
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	71 e0       	ldi	r23, 0x01	; 1
     f66:	88 ec       	ldi	r24, 0xC8	; 200
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	46 dd       	rcall	.-1396   	; 0x9f8 <_Z14exam_listeningiPiS_>
     f6c:	cc 24       	eor	r12, r12
						state = MENU_MODE;						
     f6e:	c3 94       	inc	r12
     f70:	d1 2c       	mov	r13, r1
     f72:	37 c0       	rjmp	.+110    	; 0xfe2 <main+0x416>
     f74:	81 30       	cpi	r24, 0x01	; 1
					}
				}
				else if(example_menu_flag == 1){
     f76:	91 05       	cpc	r25, r1
     f78:	81 f4       	brne	.+32     	; 0xf9a <main+0x3ce>
     f7a:	85 e1       	ldi	r24, 0x15	; 21
					sprintf(str2,"2. Example 2        ");
     f7c:	e4 e5       	ldi	r30, 0x54	; 84
     f7e:	f5 e0       	ldi	r31, 0x05	; 5
     f80:	de 01       	movw	r26, r28
     f82:	55 96       	adiw	r26, 0x15	; 21
     f84:	01 90       	ld	r0, Z+
     f86:	0d 92       	st	X+, r0
     f88:	8a 95       	dec	r24
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <main+0x3b8>
     f8c:	0b 32       	cpi	r16, 0x2B	; 43
					if(key == sw8){
     f8e:	11 05       	cpc	r17, r1
     f90:	41 f5       	brne	.+80     	; 0xfe2 <main+0x416>
     f92:	cc 24       	eor	r12, r12
						state = MENU_MODE;							
     f94:	c3 94       	inc	r12
     f96:	d1 2c       	mov	r13, r1
     f98:	24 c0       	rjmp	.+72     	; 0xfe2 <main+0x416>
     f9a:	82 30       	cpi	r24, 0x02	; 2
					}
				}
				else if(example_menu_flag == 2){
     f9c:	91 05       	cpc	r25, r1
     f9e:	81 f4       	brne	.+32     	; 0xfc0 <main+0x3f4>
     fa0:	85 e1       	ldi	r24, 0x15	; 21
					sprintf(str2,"3. Example 3        ");
     fa2:	e9 e6       	ldi	r30, 0x69	; 105
     fa4:	f5 e0       	ldi	r31, 0x05	; 5
     fa6:	de 01       	movw	r26, r28
     fa8:	55 96       	adiw	r26, 0x15	; 21
     faa:	01 90       	ld	r0, Z+
     fac:	0d 92       	st	X+, r0
     fae:	8a 95       	dec	r24
     fb0:	e1 f7       	brne	.-8      	; 0xfaa <main+0x3de>
     fb2:	0b 32       	cpi	r16, 0x2B	; 43
					if(key == sw8){
     fb4:	11 05       	cpc	r17, r1
     fb6:	a9 f4       	brne	.+42     	; 0xfe2 <main+0x416>
     fb8:	cc 24       	eor	r12, r12
						state = MENU_MODE;							
     fba:	c3 94       	inc	r12
     fbc:	d1 2c       	mov	r13, r1
     fbe:	11 c0       	rjmp	.+34     	; 0xfe2 <main+0x416>
     fc0:	03 97       	sbiw	r24, 0x03	; 3
					}
				}
				else if(example_menu_flag == 3){
     fc2:	79 f4       	brne	.+30     	; 0xfe2 <main+0x416>
     fc4:	85 e1       	ldi	r24, 0x15	; 21
					sprintf(str2,"4. Return           ");
     fc6:	ed ef       	ldi	r30, 0xFD	; 253
     fc8:	f4 e0       	ldi	r31, 0x04	; 4
     fca:	de 01       	movw	r26, r28
     fcc:	55 96       	adiw	r26, 0x15	; 21
     fce:	01 90       	ld	r0, Z+
     fd0:	0d 92       	st	X+, r0
     fd2:	8a 95       	dec	r24
     fd4:	e1 f7       	brne	.-8      	; 0xfce <main+0x402>
					if(key == sw8){
     fd6:	0b 32       	cpi	r16, 0x2B	; 43
     fd8:	11 05       	cpc	r17, r1
     fda:	19 f4       	brne	.+6      	; 0xfe2 <main+0x416>
						state = MENU_MODE;
     fdc:	cc 24       	eor	r12, r12
     fde:	c3 94       	inc	r12
     fe0:	d1 2c       	mov	r13, r1
					}
				}					
				example_btn_toggle = false;
				lcd_putsf(0,1,(unsigned char *)str2);
     fe2:	ae 01       	movw	r20, r28
     fe4:	4b 5e       	subi	r20, 0xEB	; 235
     fe6:	5f 4f       	sbci	r21, 0xFF	; 255
     fe8:	64 2d       	mov	r22, r4
     fea:	87 2d       	mov	r24, r7
     fec:	a1 d8       	rcall	.-3774   	; 0x130 <_Z9lcd_putsfhhPh>
     fee:	27 2c       	mov	r2, r7
		if(key == sw9) power_toggle = ~power_toggle;
		
		if(power_toggle){
			powerOn(str1,str2,powerOn_toggle);
			powerOn_toggle = false;
			powerOff_toggle = true;
     ff0:	54 2c       	mov	r5, r4
		
		if(key == sw9) power_toggle = ~power_toggle;
		
		if(power_toggle){
			powerOn(str1,str2,powerOn_toggle);
			powerOn_toggle = false;
     ff2:	67 2c       	mov	r6, r7
     ff4:	27 ce       	rjmp	.-946    	; 0xc44 <main+0x78>
				lcd_putsf(0,1,(unsigned char *)str2);
			}
			
		}
		else{
			powerOff(str1,str2,powerOff_toggle);
     ff6:	45 2d       	mov	r20, r5
     ff8:	be 01       	movw	r22, r28
     ffa:	6b 5e       	subi	r22, 0xEB	; 235
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	ce 01       	movw	r24, r28
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	ac dc       	rcall	.-1704   	; 0x95c <_Z8powerOffPcS_b>
    1004:	57 2c       	mov	r5, r7
			powerOff_toggle = false;
    1006:	64 2c       	mov	r6, r4
			powerOn_toggle = true;
    1008:	1d ce       	rjmp	.-966    	; 0xc44 <main+0x78>

0000100a <__cmpsf2>:
    100a:	6c d0       	rcall	.+216    	; 0x10e4 <__fp_cmp>
    100c:	08 f4       	brcc	.+2      	; 0x1010 <__cmpsf2+0x6>
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	08 95       	ret

00001012 <__fixunssfsi>:
    1012:	94 d0       	rcall	.+296    	; 0x113c <__fp_splitA>
    1014:	88 f0       	brcs	.+34     	; 0x1038 <__fixunssfsi+0x26>
    1016:	9f 57       	subi	r25, 0x7F	; 127
    1018:	90 f0       	brcs	.+36     	; 0x103e <__fixunssfsi+0x2c>
    101a:	b9 2f       	mov	r27, r25
    101c:	99 27       	eor	r25, r25
    101e:	b7 51       	subi	r27, 0x17	; 23
    1020:	a0 f0       	brcs	.+40     	; 0x104a <__fixunssfsi+0x38>
    1022:	d1 f0       	breq	.+52     	; 0x1058 <__fixunssfsi+0x46>
    1024:	66 0f       	add	r22, r22
    1026:	77 1f       	adc	r23, r23
    1028:	88 1f       	adc	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	1a f0       	brmi	.+6      	; 0x1034 <__fixunssfsi+0x22>
    102e:	ba 95       	dec	r27
    1030:	c9 f7       	brne	.-14     	; 0x1024 <__fixunssfsi+0x12>
    1032:	12 c0       	rjmp	.+36     	; 0x1058 <__fixunssfsi+0x46>
    1034:	b1 30       	cpi	r27, 0x01	; 1
    1036:	81 f0       	breq	.+32     	; 0x1058 <__fixunssfsi+0x46>
    1038:	9b d0       	rcall	.+310    	; 0x1170 <__fp_zero>
    103a:	b1 e0       	ldi	r27, 0x01	; 1
    103c:	08 95       	ret
    103e:	98 c0       	rjmp	.+304    	; 0x1170 <__fp_zero>
    1040:	67 2f       	mov	r22, r23
    1042:	78 2f       	mov	r23, r24
    1044:	88 27       	eor	r24, r24
    1046:	b8 5f       	subi	r27, 0xF8	; 248
    1048:	39 f0       	breq	.+14     	; 0x1058 <__fixunssfsi+0x46>
    104a:	b9 3f       	cpi	r27, 0xF9	; 249
    104c:	cc f3       	brlt	.-14     	; 0x1040 <__fixunssfsi+0x2e>
    104e:	86 95       	lsr	r24
    1050:	77 95       	ror	r23
    1052:	67 95       	ror	r22
    1054:	b3 95       	inc	r27
    1056:	d9 f7       	brne	.-10     	; 0x104e <__fixunssfsi+0x3c>
    1058:	3e f4       	brtc	.+14     	; 0x1068 <__fixunssfsi+0x56>
    105a:	90 95       	com	r25
    105c:	80 95       	com	r24
    105e:	70 95       	com	r23
    1060:	61 95       	neg	r22
    1062:	7f 4f       	sbci	r23, 0xFF	; 255
    1064:	8f 4f       	sbci	r24, 0xFF	; 255
    1066:	9f 4f       	sbci	r25, 0xFF	; 255
    1068:	08 95       	ret

0000106a <__floatunsisf>:
    106a:	e8 94       	clt
    106c:	09 c0       	rjmp	.+18     	; 0x1080 <__floatsisf+0x12>

0000106e <__floatsisf>:
    106e:	97 fb       	bst	r25, 7
    1070:	3e f4       	brtc	.+14     	; 0x1080 <__floatsisf+0x12>
    1072:	90 95       	com	r25
    1074:	80 95       	com	r24
    1076:	70 95       	com	r23
    1078:	61 95       	neg	r22
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	8f 4f       	sbci	r24, 0xFF	; 255
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	99 23       	and	r25, r25
    1082:	a9 f0       	breq	.+42     	; 0x10ae <__floatsisf+0x40>
    1084:	f9 2f       	mov	r31, r25
    1086:	96 e9       	ldi	r25, 0x96	; 150
    1088:	bb 27       	eor	r27, r27
    108a:	93 95       	inc	r25
    108c:	f6 95       	lsr	r31
    108e:	87 95       	ror	r24
    1090:	77 95       	ror	r23
    1092:	67 95       	ror	r22
    1094:	b7 95       	ror	r27
    1096:	f1 11       	cpse	r31, r1
    1098:	f8 cf       	rjmp	.-16     	; 0x108a <__floatsisf+0x1c>
    109a:	fa f4       	brpl	.+62     	; 0x10da <__floatsisf+0x6c>
    109c:	bb 0f       	add	r27, r27
    109e:	11 f4       	brne	.+4      	; 0x10a4 <__floatsisf+0x36>
    10a0:	60 ff       	sbrs	r22, 0
    10a2:	1b c0       	rjmp	.+54     	; 0x10da <__floatsisf+0x6c>
    10a4:	6f 5f       	subi	r22, 0xFF	; 255
    10a6:	7f 4f       	sbci	r23, 0xFF	; 255
    10a8:	8f 4f       	sbci	r24, 0xFF	; 255
    10aa:	9f 4f       	sbci	r25, 0xFF	; 255
    10ac:	16 c0       	rjmp	.+44     	; 0x10da <__floatsisf+0x6c>
    10ae:	88 23       	and	r24, r24
    10b0:	11 f0       	breq	.+4      	; 0x10b6 <__floatsisf+0x48>
    10b2:	96 e9       	ldi	r25, 0x96	; 150
    10b4:	11 c0       	rjmp	.+34     	; 0x10d8 <__floatsisf+0x6a>
    10b6:	77 23       	and	r23, r23
    10b8:	21 f0       	breq	.+8      	; 0x10c2 <__floatsisf+0x54>
    10ba:	9e e8       	ldi	r25, 0x8E	; 142
    10bc:	87 2f       	mov	r24, r23
    10be:	76 2f       	mov	r23, r22
    10c0:	05 c0       	rjmp	.+10     	; 0x10cc <__floatsisf+0x5e>
    10c2:	66 23       	and	r22, r22
    10c4:	71 f0       	breq	.+28     	; 0x10e2 <__floatsisf+0x74>
    10c6:	96 e8       	ldi	r25, 0x86	; 134
    10c8:	86 2f       	mov	r24, r22
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	2a f0       	brmi	.+10     	; 0x10da <__floatsisf+0x6c>
    10d0:	9a 95       	dec	r25
    10d2:	66 0f       	add	r22, r22
    10d4:	77 1f       	adc	r23, r23
    10d6:	88 1f       	adc	r24, r24
    10d8:	da f7       	brpl	.-10     	; 0x10d0 <__floatsisf+0x62>
    10da:	88 0f       	add	r24, r24
    10dc:	96 95       	lsr	r25
    10de:	87 95       	ror	r24
    10e0:	97 f9       	bld	r25, 7
    10e2:	08 95       	ret

000010e4 <__fp_cmp>:
    10e4:	99 0f       	add	r25, r25
    10e6:	00 08       	sbc	r0, r0
    10e8:	55 0f       	add	r21, r21
    10ea:	aa 0b       	sbc	r26, r26
    10ec:	e0 e8       	ldi	r30, 0x80	; 128
    10ee:	fe ef       	ldi	r31, 0xFE	; 254
    10f0:	16 16       	cp	r1, r22
    10f2:	17 06       	cpc	r1, r23
    10f4:	e8 07       	cpc	r30, r24
    10f6:	f9 07       	cpc	r31, r25
    10f8:	c0 f0       	brcs	.+48     	; 0x112a <__stack+0x2b>
    10fa:	12 16       	cp	r1, r18
    10fc:	13 06       	cpc	r1, r19
    10fe:	e4 07       	cpc	r30, r20
    1100:	f5 07       	cpc	r31, r21
    1102:	98 f0       	brcs	.+38     	; 0x112a <__stack+0x2b>
    1104:	62 1b       	sub	r22, r18
    1106:	73 0b       	sbc	r23, r19
    1108:	84 0b       	sbc	r24, r20
    110a:	95 0b       	sbc	r25, r21
    110c:	39 f4       	brne	.+14     	; 0x111c <__stack+0x1d>
    110e:	0a 26       	eor	r0, r26
    1110:	61 f0       	breq	.+24     	; 0x112a <__stack+0x2b>
    1112:	23 2b       	or	r18, r19
    1114:	24 2b       	or	r18, r20
    1116:	25 2b       	or	r18, r21
    1118:	21 f4       	brne	.+8      	; 0x1122 <__stack+0x23>
    111a:	08 95       	ret
    111c:	0a 26       	eor	r0, r26
    111e:	09 f4       	brne	.+2      	; 0x1122 <__stack+0x23>
    1120:	a1 40       	sbci	r26, 0x01	; 1
    1122:	a6 95       	lsr	r26
    1124:	8f ef       	ldi	r24, 0xFF	; 255
    1126:	81 1d       	adc	r24, r1
    1128:	81 1d       	adc	r24, r1
    112a:	08 95       	ret

0000112c <__fp_split3>:
    112c:	57 fd       	sbrc	r21, 7
    112e:	90 58       	subi	r25, 0x80	; 128
    1130:	44 0f       	add	r20, r20
    1132:	55 1f       	adc	r21, r21
    1134:	59 f0       	breq	.+22     	; 0x114c <__fp_splitA+0x10>
    1136:	5f 3f       	cpi	r21, 0xFF	; 255
    1138:	71 f0       	breq	.+28     	; 0x1156 <__fp_splitA+0x1a>
    113a:	47 95       	ror	r20

0000113c <__fp_splitA>:
    113c:	88 0f       	add	r24, r24
    113e:	97 fb       	bst	r25, 7
    1140:	99 1f       	adc	r25, r25
    1142:	61 f0       	breq	.+24     	; 0x115c <__fp_splitA+0x20>
    1144:	9f 3f       	cpi	r25, 0xFF	; 255
    1146:	79 f0       	breq	.+30     	; 0x1166 <__fp_splitA+0x2a>
    1148:	87 95       	ror	r24
    114a:	08 95       	ret
    114c:	12 16       	cp	r1, r18
    114e:	13 06       	cpc	r1, r19
    1150:	14 06       	cpc	r1, r20
    1152:	55 1f       	adc	r21, r21
    1154:	f2 cf       	rjmp	.-28     	; 0x113a <__fp_split3+0xe>
    1156:	46 95       	lsr	r20
    1158:	f1 df       	rcall	.-30     	; 0x113c <__fp_splitA>
    115a:	08 c0       	rjmp	.+16     	; 0x116c <__fp_splitA+0x30>
    115c:	16 16       	cp	r1, r22
    115e:	17 06       	cpc	r1, r23
    1160:	18 06       	cpc	r1, r24
    1162:	99 1f       	adc	r25, r25
    1164:	f1 cf       	rjmp	.-30     	; 0x1148 <__fp_splitA+0xc>
    1166:	86 95       	lsr	r24
    1168:	71 05       	cpc	r23, r1
    116a:	61 05       	cpc	r22, r1
    116c:	08 94       	sec
    116e:	08 95       	ret

00001170 <__fp_zero>:
    1170:	e8 94       	clt

00001172 <__fp_szero>:
    1172:	bb 27       	eor	r27, r27
    1174:	66 27       	eor	r22, r22
    1176:	77 27       	eor	r23, r23
    1178:	cb 01       	movw	r24, r22
    117a:	97 f9       	bld	r25, 7
    117c:	08 95       	ret

0000117e <__gesf2>:
    117e:	b2 df       	rcall	.-156    	; 0x10e4 <__fp_cmp>
    1180:	08 f4       	brcc	.+2      	; 0x1184 <__gesf2+0x6>
    1182:	8f ef       	ldi	r24, 0xFF	; 255
    1184:	08 95       	ret

00001186 <__mulsf3>:
    1186:	0b d0       	rcall	.+22     	; 0x119e <__mulsf3x>
    1188:	78 c0       	rjmp	.+240    	; 0x127a <__fp_round>
    118a:	69 d0       	rcall	.+210    	; 0x125e <__fp_pscA>
    118c:	28 f0       	brcs	.+10     	; 0x1198 <__mulsf3+0x12>
    118e:	6e d0       	rcall	.+220    	; 0x126c <__fp_pscB>
    1190:	18 f0       	brcs	.+6      	; 0x1198 <__mulsf3+0x12>
    1192:	95 23       	and	r25, r21
    1194:	09 f0       	breq	.+2      	; 0x1198 <__mulsf3+0x12>
    1196:	5a c0       	rjmp	.+180    	; 0x124c <__fp_inf>
    1198:	5f c0       	rjmp	.+190    	; 0x1258 <__fp_nan>
    119a:	11 24       	eor	r1, r1
    119c:	ea cf       	rjmp	.-44     	; 0x1172 <__fp_szero>

0000119e <__mulsf3x>:
    119e:	c6 df       	rcall	.-116    	; 0x112c <__fp_split3>
    11a0:	a0 f3       	brcs	.-24     	; 0x118a <__mulsf3+0x4>

000011a2 <__mulsf3_pse>:
    11a2:	95 9f       	mul	r25, r21
    11a4:	d1 f3       	breq	.-12     	; 0x119a <__mulsf3+0x14>
    11a6:	95 0f       	add	r25, r21
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	55 1f       	adc	r21, r21
    11ac:	62 9f       	mul	r22, r18
    11ae:	f0 01       	movw	r30, r0
    11b0:	72 9f       	mul	r23, r18
    11b2:	bb 27       	eor	r27, r27
    11b4:	f0 0d       	add	r31, r0
    11b6:	b1 1d       	adc	r27, r1
    11b8:	63 9f       	mul	r22, r19
    11ba:	aa 27       	eor	r26, r26
    11bc:	f0 0d       	add	r31, r0
    11be:	b1 1d       	adc	r27, r1
    11c0:	aa 1f       	adc	r26, r26
    11c2:	64 9f       	mul	r22, r20
    11c4:	66 27       	eor	r22, r22
    11c6:	b0 0d       	add	r27, r0
    11c8:	a1 1d       	adc	r26, r1
    11ca:	66 1f       	adc	r22, r22
    11cc:	82 9f       	mul	r24, r18
    11ce:	22 27       	eor	r18, r18
    11d0:	b0 0d       	add	r27, r0
    11d2:	a1 1d       	adc	r26, r1
    11d4:	62 1f       	adc	r22, r18
    11d6:	73 9f       	mul	r23, r19
    11d8:	b0 0d       	add	r27, r0
    11da:	a1 1d       	adc	r26, r1
    11dc:	62 1f       	adc	r22, r18
    11de:	83 9f       	mul	r24, r19
    11e0:	a0 0d       	add	r26, r0
    11e2:	61 1d       	adc	r22, r1
    11e4:	22 1f       	adc	r18, r18
    11e6:	74 9f       	mul	r23, r20
    11e8:	33 27       	eor	r19, r19
    11ea:	a0 0d       	add	r26, r0
    11ec:	61 1d       	adc	r22, r1
    11ee:	23 1f       	adc	r18, r19
    11f0:	84 9f       	mul	r24, r20
    11f2:	60 0d       	add	r22, r0
    11f4:	21 1d       	adc	r18, r1
    11f6:	82 2f       	mov	r24, r18
    11f8:	76 2f       	mov	r23, r22
    11fa:	6a 2f       	mov	r22, r26
    11fc:	11 24       	eor	r1, r1
    11fe:	9f 57       	subi	r25, 0x7F	; 127
    1200:	50 40       	sbci	r21, 0x00	; 0
    1202:	8a f0       	brmi	.+34     	; 0x1226 <__mulsf3_pse+0x84>
    1204:	e1 f0       	breq	.+56     	; 0x123e <__mulsf3_pse+0x9c>
    1206:	88 23       	and	r24, r24
    1208:	4a f0       	brmi	.+18     	; 0x121c <__mulsf3_pse+0x7a>
    120a:	ee 0f       	add	r30, r30
    120c:	ff 1f       	adc	r31, r31
    120e:	bb 1f       	adc	r27, r27
    1210:	66 1f       	adc	r22, r22
    1212:	77 1f       	adc	r23, r23
    1214:	88 1f       	adc	r24, r24
    1216:	91 50       	subi	r25, 0x01	; 1
    1218:	50 40       	sbci	r21, 0x00	; 0
    121a:	a9 f7       	brne	.-22     	; 0x1206 <__mulsf3_pse+0x64>
    121c:	9e 3f       	cpi	r25, 0xFE	; 254
    121e:	51 05       	cpc	r21, r1
    1220:	70 f0       	brcs	.+28     	; 0x123e <__mulsf3_pse+0x9c>
    1222:	14 c0       	rjmp	.+40     	; 0x124c <__fp_inf>
    1224:	a6 cf       	rjmp	.-180    	; 0x1172 <__fp_szero>
    1226:	5f 3f       	cpi	r21, 0xFF	; 255
    1228:	ec f3       	brlt	.-6      	; 0x1224 <__mulsf3_pse+0x82>
    122a:	98 3e       	cpi	r25, 0xE8	; 232
    122c:	dc f3       	brlt	.-10     	; 0x1224 <__mulsf3_pse+0x82>
    122e:	86 95       	lsr	r24
    1230:	77 95       	ror	r23
    1232:	67 95       	ror	r22
    1234:	b7 95       	ror	r27
    1236:	f7 95       	ror	r31
    1238:	e7 95       	ror	r30
    123a:	9f 5f       	subi	r25, 0xFF	; 255
    123c:	c1 f7       	brne	.-16     	; 0x122e <__mulsf3_pse+0x8c>
    123e:	fe 2b       	or	r31, r30
    1240:	88 0f       	add	r24, r24
    1242:	91 1d       	adc	r25, r1
    1244:	96 95       	lsr	r25
    1246:	87 95       	ror	r24
    1248:	97 f9       	bld	r25, 7
    124a:	08 95       	ret

0000124c <__fp_inf>:
    124c:	97 f9       	bld	r25, 7
    124e:	9f 67       	ori	r25, 0x7F	; 127
    1250:	80 e8       	ldi	r24, 0x80	; 128
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	08 95       	ret

00001258 <__fp_nan>:
    1258:	9f ef       	ldi	r25, 0xFF	; 255
    125a:	80 ec       	ldi	r24, 0xC0	; 192
    125c:	08 95       	ret

0000125e <__fp_pscA>:
    125e:	00 24       	eor	r0, r0
    1260:	0a 94       	dec	r0
    1262:	16 16       	cp	r1, r22
    1264:	17 06       	cpc	r1, r23
    1266:	18 06       	cpc	r1, r24
    1268:	09 06       	cpc	r0, r25
    126a:	08 95       	ret

0000126c <__fp_pscB>:
    126c:	00 24       	eor	r0, r0
    126e:	0a 94       	dec	r0
    1270:	12 16       	cp	r1, r18
    1272:	13 06       	cpc	r1, r19
    1274:	14 06       	cpc	r1, r20
    1276:	05 06       	cpc	r0, r21
    1278:	08 95       	ret

0000127a <__fp_round>:
    127a:	09 2e       	mov	r0, r25
    127c:	03 94       	inc	r0
    127e:	00 0c       	add	r0, r0
    1280:	11 f4       	brne	.+4      	; 0x1286 <__fp_round+0xc>
    1282:	88 23       	and	r24, r24
    1284:	52 f0       	brmi	.+20     	; 0x129a <__fp_round+0x20>
    1286:	bb 0f       	add	r27, r27
    1288:	40 f4       	brcc	.+16     	; 0x129a <__fp_round+0x20>
    128a:	bf 2b       	or	r27, r31
    128c:	11 f4       	brne	.+4      	; 0x1292 <__fp_round+0x18>
    128e:	60 ff       	sbrs	r22, 0
    1290:	04 c0       	rjmp	.+8      	; 0x129a <__fp_round+0x20>
    1292:	6f 5f       	subi	r22, 0xFF	; 255
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	8f 4f       	sbci	r24, 0xFF	; 255
    1298:	9f 4f       	sbci	r25, 0xFF	; 255
    129a:	08 95       	ret

0000129c <__divmodsi4>:
    129c:	05 2e       	mov	r0, r21
    129e:	97 fb       	bst	r25, 7
    12a0:	16 f4       	brtc	.+4      	; 0x12a6 <__divmodsi4+0xa>
    12a2:	00 94       	com	r0
    12a4:	0f d0       	rcall	.+30     	; 0x12c4 <__negsi2>
    12a6:	57 fd       	sbrc	r21, 7
    12a8:	05 d0       	rcall	.+10     	; 0x12b4 <__divmodsi4_neg2>
    12aa:	14 d0       	rcall	.+40     	; 0x12d4 <__udivmodsi4>
    12ac:	07 fc       	sbrc	r0, 7
    12ae:	02 d0       	rcall	.+4      	; 0x12b4 <__divmodsi4_neg2>
    12b0:	46 f4       	brtc	.+16     	; 0x12c2 <__divmodsi4_exit>
    12b2:	08 c0       	rjmp	.+16     	; 0x12c4 <__negsi2>

000012b4 <__divmodsi4_neg2>:
    12b4:	50 95       	com	r21
    12b6:	40 95       	com	r20
    12b8:	30 95       	com	r19
    12ba:	21 95       	neg	r18
    12bc:	3f 4f       	sbci	r19, 0xFF	; 255
    12be:	4f 4f       	sbci	r20, 0xFF	; 255
    12c0:	5f 4f       	sbci	r21, 0xFF	; 255

000012c2 <__divmodsi4_exit>:
    12c2:	08 95       	ret

000012c4 <__negsi2>:
    12c4:	90 95       	com	r25
    12c6:	80 95       	com	r24
    12c8:	70 95       	com	r23
    12ca:	61 95       	neg	r22
    12cc:	7f 4f       	sbci	r23, 0xFF	; 255
    12ce:	8f 4f       	sbci	r24, 0xFF	; 255
    12d0:	9f 4f       	sbci	r25, 0xFF	; 255
    12d2:	08 95       	ret

000012d4 <__udivmodsi4>:
    12d4:	a1 e2       	ldi	r26, 0x21	; 33
    12d6:	1a 2e       	mov	r1, r26
    12d8:	aa 1b       	sub	r26, r26
    12da:	bb 1b       	sub	r27, r27
    12dc:	fd 01       	movw	r30, r26
    12de:	0d c0       	rjmp	.+26     	; 0x12fa <__udivmodsi4_ep>

000012e0 <__udivmodsi4_loop>:
    12e0:	aa 1f       	adc	r26, r26
    12e2:	bb 1f       	adc	r27, r27
    12e4:	ee 1f       	adc	r30, r30
    12e6:	ff 1f       	adc	r31, r31
    12e8:	a2 17       	cp	r26, r18
    12ea:	b3 07       	cpc	r27, r19
    12ec:	e4 07       	cpc	r30, r20
    12ee:	f5 07       	cpc	r31, r21
    12f0:	20 f0       	brcs	.+8      	; 0x12fa <__udivmodsi4_ep>
    12f2:	a2 1b       	sub	r26, r18
    12f4:	b3 0b       	sbc	r27, r19
    12f6:	e4 0b       	sbc	r30, r20
    12f8:	f5 0b       	sbc	r31, r21

000012fa <__udivmodsi4_ep>:
    12fa:	66 1f       	adc	r22, r22
    12fc:	77 1f       	adc	r23, r23
    12fe:	88 1f       	adc	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	1a 94       	dec	r1
    1304:	69 f7       	brne	.-38     	; 0x12e0 <__udivmodsi4_loop>
    1306:	60 95       	com	r22
    1308:	70 95       	com	r23
    130a:	80 95       	com	r24
    130c:	90 95       	com	r25
    130e:	9b 01       	movw	r18, r22
    1310:	ac 01       	movw	r20, r24
    1312:	bd 01       	movw	r22, r26
    1314:	cf 01       	movw	r24, r30
    1316:	08 95       	ret

00001318 <_exit>:
    1318:	f8 94       	cli

0000131a <__stop_program>:
    131a:	ff cf       	rjmp	.-2      	; 0x131a <__stop_program>
